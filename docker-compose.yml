version: "3.7"

x-common-env-variables: &env-vars
  PUID: ${PUID}
  PGID: ${PGID}
  TZ: ${TIMEZONE}

x-common-driver-variables: &driver-opts
  type: none
  o: bind

x-common-dns: &dns
  network_mode: bridge
  dns:
    - 10.2.0.100
    - 127.0.0.1

x-common-networks: &networks
  networks:
    - web
    - private_network

x-common-networking: &networking
  <<: *dns
  <<: *networks

x-common-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: http://127.0.0.1:3100/loki/api/v1/push

networks:
  web:
    external: false
  internal:
    external: false
  private_network:
    ipam:
      driver: default
      config:
        - subnet: 10.2.0.0/24

volumes:
  config-adguard:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/adguard
  config-authelia:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/authelia
  config-auth-db:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/auth/db
  config-calibre-web:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/calibre-web
  config-code:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/code
  config-dnscrypt:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/dnscrypt
  config-freshrss:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/freshrss
  config-grafana:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/grafana/config
  config-grafana-data:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/grafana/data
  config-grafana-home:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/grafana/home
  config-jellyfin:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/jellyfin
  config-jellyfin-cache:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/jellyfin/cache
  config-jellyseerr:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/jellyseerr
  config-lidarr:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/lidarr
  config-loki:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/loki/config
  config-loki-data:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/loki/data
  config-mongo:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/mongo
  config-onedev:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/onedev
  config-outline-storage:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/outline/storage
  config-outline-db:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/outline/db
  config-pocket:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/pocket/images
  config-pocket-db:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/pocket/db
  config-portainer:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/portainer
  config-prometheus:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/prometheus
  config-promtail:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/promtail
  config-prowlarr:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/prowlarr
  config-qbittorrent:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/qbittorrent
  config-radarr:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/radarr
  config-readarr:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/readarr
  config-scripts:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/scripts
  config-sonarr:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/sonarr
  config-syncthing:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/syncthing
  config-traefik:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/traefik
  config-unbound:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/unbound
  config-vaultwarden:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/vaultwarden
  config-vikunja:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/vikunja
  config-vikunja-db:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/vikunja-db
  config-youtubedl-appdata:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/youtube/appdata
  config-youtubedl-subscriptions:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/youtube/subscriptions
  config-youtubedl-users:
    driver_opts:
      <<: *driver-opts
      device: ${CONFIG_DIR}/youtube/users
  downloads:
    driver_opts:
      <<: *driver-opts
      device: ${DOWNLOAD_DIR}
  media:
    driver_opts:
      <<: *driver-opts
      device: ${DATA_DIR}
  media-books:
    driver_opts:
      <<: *driver-opts
      device: ${DATA_DIR}/Books
  media-movies:
    driver_opts:
      <<: *driver-opts
      device: ${DATA_DIR}/Movies
  media-music:
    driver_opts:
      <<: *driver-opts
      device: ${DATA_DIR}/Music
  media-shows:
    driver_opts:
      <<: *driver-opts
      device: ${DATA_DIR}/Television Shows
  media-youtube:
    driver_opts:
      <<: *driver-opts
      device: ${DATA_DIR}/Youtube
  sync:
    driver_opts:
      <<: *driver-opts
      device: ${SYNC_DIR}

services:
  ###
  #               _           _
  #      /\      | |         (_)
  #     /  \   __| |_ __ ___  _ _ __
  #    / /\ \ / _` | '_ ` _ \| | '_ \
  #   / ____ \ (_| | | | | | | | | | |
  #  /_/    \_\__,_|_| |_| |_|_|_| |_|
  ###

  traefik:
    container_name: traefik
    image: traefik
    restart: unless-stopped
    command:
      - --api=true
      - --api.dashboard=true
      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.letsencrypt.acme.email=${ADMIN_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/config/acme.json
      - --entrypoints.web.address=:80
      - --entrypoints.web.forwardedHeaders.insecure=false
      - --entrypoints.web.proxyProtocol.insecure=false
      - --entryPoints.web.forwardedHeaders.trustedIPs=10.0.0.0/8,172.0.0.0/8,192.168.0.0/16,fc00::/7,100.0.0.0/8
      - --entryPoints.web.proxyProtocol.trustedIPs=10.0.0.0/8,172.0.0.0/8,192.168.0.0/16,fc00::/7,100.0.0.0/8
      - --experimental.http3=true
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http3
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.${DOMAIN}
      - --entryPoints.websecure.forwardedHeaders.trustedIPs=10.0.0.0/8,172.0.0.0/8,192.168.0.0/16,fc00::/7,100.0.0.0/8
      - --entryPoints.websecure.proxyProtocol.trustedIPs=10.0.0.0/8,172.0.0.0/8,192.168.0.0/16,fc00::/7,100.0.0.0/8
      - --entrypoints.websecure.forwardedHeaders.insecure=false
      - --entrypoints.websecure.proxyProtocol.insecure=false
      - --ping=true
      - --metrics.prometheus=true
      - --providers.docker=true
      - --providers.docker.watch=true
      - --providers.docker.exposedbydefault=true
      - --providers.docker.network=web
    environment:
      <<: *env-vars
      CLOUDFLARE_DNS_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN}
    ports:
      - 80:80
      - 443:443/tcp
      - 443:443/udp
      - 8080:8080
      - 8888:8888
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - config-traefik:/config
    networks:
      internal:
      web:
        priority: 20
        aliases:
          - auth.${DOMAIN}
      private_network:
    <<: *dns
    <<: *logging
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      traefik.http.routers.dashboard.rule: Host(`dash.${DOMAIN}`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: authelia@docker
      traefik.http.routers.dashboard.tls: true
      traefik.http.routers.dashboard.tls.certResolver: letsencrypt
      traefik.http.routers.http-catchall.rule: hostregexp(`{host:.+}`)
      traefik.http.routers.http-catchall.entrypoints: web
      traefik.http.routers.http-catchall.middlewares: redirect-to-https
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      traefik.http.middlewares.redirect-to-https.redirectScheme.permanent: true

  portainer:
    image: portainer/portainer-ce
    container_name: admin
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - config-portainer:/data
    <<: *dns
    networks:
      - internal
      - web
      - private_network
    restart: unless-stopped
    environment: *env-vars
    labels:
      traefik.http.routers.admin.rule: Host(`admin.${DOMAIN}`)
      traefik.http.services.admin.loadbalancer.server.port: 9000
      traefik.http.routers.admin.entrypoints: websecure
      traefik.http.routers.admin.tls: true
      traefik.http.routers.admin.tls.certResolver: letsencrypt

  auth:
    image: authelia/authelia
    container_name: authelia
    volumes:
      - config-authelia:/config
    <<: *dns
    <<: *logging
    networks:
      - internal
      - web
      - private_network
    restart: unless-stopped
    environment: *env-vars
    labels:
      traefik.http.routers.auth.rule: Host(`auth.${DOMAIN}`)
      traefik.http.services.auth.loadbalancer.server.port: 9091
      traefik.http.routers.auth.entrypoints: websecure
      traefik.http.routers.auth.tls: true
      traefik.http.routers.auth.tls.certResolver: letsencrypt
      traefik.http.middlewares.authelia.forwardauth.address: http://authelia:9091/api/verify?rd=https://auth.${DOMAIN}
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: Remote-User,Remote-Groups,Remote-Name,Remote-Email

  ###
  #   __  __      _        _
  #  |  \/  |    | |      (_)
  #  | \  / | ___| |_ _ __ _  ___ ___
  #  | |\/| |/ _ \ __| '__| |/ __/ __|
  #  | |  | |  __/ |_| |  | | (__\__ \
  #  |_|  |_|\___|\__|_|  |_|\___|___/
  ###

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    <<: *networking
    <<: *logging
    entrypoint: ["/bin/sh", "-c"]
    command:
      - "rm -rf /prometheus/data/chunks_head; /bin/prometheus
        --config.file=/etc/prometheus/prometheus.yml
        --storage.tsdb.path=/prometheus"
    volumes:
      - config-prometheus:/etc/prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090 || exit 1"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s
    labels:
      traefik.http.routers.prometheus.rule: Host(`prometheus.${DOMAIN}`)
      traefik.http.routers.prometheus.entrypoints: websecure
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
      traefik.http.routers.prometheus.tls: true
      traefik.http.routers.prometheus.tls.certResolver: letsencrypt
      traefik.backend: prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    <<: *networking
    <<: *logging
    user: ${PUID}
    environment:
      GF_SERVER_ROOT_URL: https://metrics.${DOMAIN}
    volumes:
      - config-grafana:/etc/grafana
      - config-grafana-data:/var/lib/grafana
      - config-grafana-home:/usr/share/grafana
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s
    labels:
      traefik.http.routers.grafana.rule: Host(`metrics.${DOMAIN}`)
      traefik.http.services.grafana.loadBalancer.server.port: 3000
      traefik.http.routers.grafana.entrypoints: websecure
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.tls.certResolver: letsencrypt

  loki:
    container_name: loki
    image: grafana/loki
    restart: unless-stopped
    <<: *dns
    <<: *logging
    networks:
      - internal
      - web
      - private_network
    ports:
      - 3100:3100
    volumes:
      - config-loki:/etc/loki
      - config-loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    labels:
      traefik.http.routers.loki.rule: Host(`loki.${DOMAIN}`)
      traefik.http.services.loki.loadBalancer.server.port: 3100
      traefik.http.routers.loki.entrypoints: websecure
      traefik.http.routers.loki.tls: true
      traefik.http.routers.loki.tls.certResolver: letsencrypt

  promtail:
    container_name: promtail
    image: grafana/promtail
    restart: unless-stopped
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - config-promtail:/etc/promtail
    command: -config.file=/etc/promtail/promtail-config.yaml
    <<: *dns
    <<: *logging
    networks:
      - internal
      - web
      - private_network
    labels:
      traefik.enable: false

  adguard_exporter:
    image: ebrianne/adguard-exporter
    container_name: adguard-exporter
    restart: unless-stopped
    <<: *networking
    <<: *logging
    depends_on:
      - adguard
    ports:
      - 9617:9617
    environment:
      adguard_protocol: http
      adguard_hostname: adguard
      adguard_username: ${ADGUARD_USERNAME}
      adguard_password: ${ADGUARD_PASSWORD}
      adguard_port: 3000
      server_port: 9617
      interval: 10s
      log_limit: 10000
    labels:
      traefik.enable: false

  node_exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node-exporter
    command: --path.rootfs=/host
    <<: *networking
    <<: *logging
    pid: host
    restart: unless-stopped
    ports:
      - 9619:9100
    volumes:
      - /:/host:ro,rslave
    healthcheck:
      test: ["CMD-SHELL", "/bin/netstat -pant | /bin/grep ':9100'"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.enable: false

  ###
  #   _____  _   _  _____
  #  |  __ \| \ | |/ ____|
  #  | |  | |  \| | (___
  #  | |  | | . ` |\___ \
  #  | |__| | |\  |____) |
  #  |_____/|_| \_|_____/
  ###

  unbound:
    image: mvance/unbound
    container_name: unbound
    hostname: unbound
    restart: always
    networks:
      private_network:
        ipv4_address: 10.2.0.200
    volumes:
      - config-unbound:/opt/unbound/etc/unbound/
    environment: *env-vars
    <<: *logging
    labels:
      traefik.enable: false

  dnscrypt:
    image: zquestz/dnscrypt-server
    container_name: dnscrypt
    restart: always
    command: init -N ${DOMAIN} -E '10.2.0.150:5443' -M 0.0.0.0:9100
    networks:
      private_network:
        ipv4_address: 10.2.0.150
    ports:
      - 5443:553/udp
      - 5443:553/tcp
      - 9100:9100
    volumes:
      - config-dnscrypt:/opt/encrypted-dns/etc/keys
    environment: *env-vars
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "drill -p 553 one.one.one.one @127.0.0.1 || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.enable: false

  adguard:
    container_name: adguard
    image: adguard/adguardhome
    restart: always
    depends_on:
      - unbound
      - dnscrypt
    volumes:
      - config-adguard:/opt/adguardhome/conf
    dns:
      - 127.0.0.1
      - 10.2.0.200
      - 10.2.0.150
    <<: *logging
    networks:
      private_network:
        ipv4_address: 10.2.0.100
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      #- 68:68/tcp
      #- 68:68/udp
      - 4443:443/tcp
      - 4443:443/udp
      - 8853:8853/udp
      - ${IP}:3000:3000/tcp
    healthcheck:
      test: ["CMD-SHELL", "/bin/netstat -pant | /bin/grep :53"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.adguard.rule: Host(`dns.${DOMAIN}`)
      traefik.http.services.adguard.loadbalancer.server.port: 3000
      traefik.http.routers.adguard.entrypoints: websecure
      traefik.http.routers.adguard.tls: true
      traefik.http.routers.adguard.tls.certResolver: letsencrypt

  ###
  #    _____ _                 _
  #   / ____| |               | |
  #  | |    | | ___  _   _  __| |
  #  | |    | |/ _ \| | | |/ _` |
  #  | |____| | (_) | |_| | (_| |
  #   \_____|_|\___/ \__,_|\__,_|
  ###

  todo-api:
    image: vikunja/api
    container_name: todo-api
    environment:
      <<: *env-vars
      VIKUNJA_DATABASE_HOST: todo-db
      VIKUNJA_DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      VIKUNJA_DATABASE_TYPE: mysql
      VIKUNJA_DATABASE_USER: ${DATABASE_USERNAME}
      VIKUNJA_DATABASE_DATABASE: ${TODO_DATABASE}
      VIKUNJA_SERVICE_JWTSECRET: ${JWT_SECRET}
      VIKUNJA_SERVICE_FRONTENDURL: https://todo.${DOMAIN}/
    volumes:
      - config-vikunja:/app/vikunja/files
    <<: *dns
    <<: *logging
    networks:
      - internal
      - web
      - private_network
    depends_on:
      - todo-db
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3456/api/v1/info",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo-api.rule:
        Host(`todo.${DOMAIN}`) && PathPrefix(`/api/v1`, `/dav/`,
        `/.well-known/`)
      traefik.http.routers.todo-api.entrypoints: websecure
      traefik.http.routers.todo-api.tls: true
      traefik.http.routers.todo-api.tls.certResolver: letsencrypt

  todo:
    container_name: todo
    image: vikunja/frontend
    depends_on:
      - todo-api
    ports:
      - 3031:3000
    labels:
      traefik.http.routers.todo.rule: Host(`todo.${DOMAIN}`)
      traefik.http.routers.todo.entrypoints: websecure
      traefik.http.routers.todo.tls: true
      traefik.http.routers.todo.tls.certResolver: letsencrypt
    environment:
      <<: *env-vars
      VIKUNJA_API_URL: https://todo.${DOMAIN}/api/v1
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  code-server:
    image: lscr.io/linuxserver/openvscode-server
    container_name: code-server
    restart: unless-stopped
    <<: *networking
    <<: *logging
    environment:
      <<: *env-vars
      CONNECTION_TOKEN: ${CODE_PASSWORD}
      SUDO_PASSWORD: ${CODE_SUDO_PASSWORD}
      PROXY_DOMAIN: dev.${DOMAIN}
    volumes:
      - config-code:/config
      - sync:/sync
    ports:
      - 8443:8443
    labels:
      traefik.port: 8443
      traefik.http.routers.code.rule: Host(`dev.${DOMAIN}`)
      traefik.http.routers.code.entrypoints: websecure
      traefik.http.routers.code.tls: true
      traefik.http.routers.code.tls.certResolver: letsencrypt

  onedev:
    image: 1dev/server
    container_name: git
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - config-onedev:/opt/onedev
    ports:
      - 6611:6611
    <<: *networking
    <<: *logging
    environment: *env-vars
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:6610"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.git.rule: Host(`git.${DOMAIN}`)
      traefik.http.routers.git.entrypoints: websecure
      traefik.http.services.git.loadBalancer.server.port: 6610
      traefik.http.routers.git.tls: true
      traefik.http.routers.git.tls.certResolver: letsencrypt

  sync:
    container_name: sync
    image: lscr.io/linuxserver/syncthing
    restart: unless-stopped
    environment: *env-vars
    volumes:
      - config-syncthing:/config
      - sync:/config/Sync
    ports:
      - 22000:22000
      - 21027:21027/udp
    <<: *networking
    <<: *logging
    healthcheck:
      test: nc -z 127.0.0.1 8384 || exit 1
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      traefik.http.routers.sync.rule: Host(`sync.${DOMAIN}`)
      traefik.http.routers.sync.entrypoints: websecure
      traefik.http.services.sync.loadbalancer.server.port: 8384
      traefik.http.routers.sync.tls: true
      traefik.http.routers.sync.tls.certResolver: letsencrypt

  vaultwarden:
    image: vaultwarden/server
    container_name: vaultwarden
    restart: unless-stopped
    <<: *networking
    <<: *logging
    volumes:
      - config-vaultwarden:/data
    environment:
      <<: *env-vars
      DOMAIN: "https://vault.${DOMAIN}"
      ADMIN_TOKEN: ${VAULTWARDEN_TOKEN}
      WEBSOCKET_ENABLED: true
      ROCKET_PORT: 8800
    labels:
      traefik.http.routers.vaultwarden-ui.rule: Host(`vault.${DOMAIN}`)
      traefik.http.services.vaultwarden-ui.loadbalancer.server.port: 8800
      traefik.http.routers.vaultwarden-ui.entrypoints: websecure
      traefik.http.routers.vaultwarden-ui.tls: true
      traefik.http.routers.vaultwarden-ui.tls.certResolver: letsencrypt
      traefik.http.routers.vaultwarden-ui.service: vaultwarden-ui
      traefik.http.routers.vaultwarden-websocket.rule:
        Host(`vault.${DOMAIN}`) && Path(`/notifications/hub`)
      traefik.http.routers.vaultwarden-websocket.entrypoints: websecure
      traefik.http.routers.vaultwarden-websocket.tls: true
      traefik.http.routers.vaultwarden-websocket.tls.certResolver: letsencrypt
      traefik.http.routers.vaultwarden-websocket.service: vaultwarden-websocket
      traefik.http.services.vaultwarden-websocket.loadbalancer.server.port: 3012

  freshrss:
    image: lscr.io/linuxserver/freshrss
    container_name: freshrss
    restart: unless-stopped
    environment: *env-vars
    <<: *networking
    <<: *logging
    volumes:
      - config-freshrss:/config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS 'http://localhost/i/' | grep -q 'jsonVars' || exit 1",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.freshrss.rule: Host(`rss.${DOMAIN}`)
      traefik.http.routers.freshrss.entrypoints: websecure
      traefik.http.routers.freshrss.tls: true
      traefik.http.routers.freshrss.tls.certResolver: letsencrypt

  wallabag:
    image: wallabag/wallabag
    container_name: pocket
    <<: *dns
    <<: *logging
    networks:
      - internal
      - web
      - private_network
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      SYMFONY__ENV__DATABASE_DRIVER: pdo_pgsql
      SYMFONY__ENV__DATABASE_HOST: pocket_db
      SYMFONY__ENV__DATABASE_PORT: 5432
      SYMFONY__ENV__DATABASE_NAME: wallabag
      SYMFONY__ENV__DATABASE_USER: ${DATABASE_USERNAME}
      SYMFONY__ENV__DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      SYMFONY__ENV__DOMAIN_NAME: https://pocket.${DOMAIN}
      SYMFONY__ENV__SERVER_NAME: Pocket
    volumes:
      - config-pocket:/var/www/wallabag/web/assets/images
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost",
        ]
      interval: 1m
      timeout: 3s
    depends_on:
      - pocket_db
    labels:
      traefik.http.routers.pocket.rule: Host(`pocket.${DOMAIN}`)
      traefik.http.routers.pocket.entrypoints: websecure
      traefik.http.routers.pocket.tls: true
      traefik.http.routers.pocket.tls.certResolver: letsencrypt

  wiki:
    image: outlinewiki/outline
    container_name: wiki
    restart: unless-stopped
    environment: *env-vars
    env_file: ${CONFIG_DIR}/outline/config.env
    <<: *dns
    <<: *logging
    networks:
      - internal
      - web
      - private_network
    depends_on:
      - wiki_db
      - wiki_redis
      - minio
    healthcheck:
      test: ["CMD-SHELL", "/bin/netstat -pant | /bin/grep ':3000'"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.outline.rule: Host(`wiki.${DOMAIN}`)
      traefik.http.services.outline.loadbalancer.server.port: 3000
      traefik.http.routers.outline.entrypoints: websecure
      traefik.http.routers.outline.tls: true
      traefik.http.routers.outline.tls.certResolver: letsencrypt

  minio:
    image: minio/minio
    container_name: minio
    entrypoint: sh
    command: -c 'minio server /data --console-address ":9001"'
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - config-outline-storage:/data
    <<: *networking
    <<: *logging
    environment:
      <<: *env-vars
      MINIO_BROWSER_REDIRECT_URL: "https://minio.${DOMAIN}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      traefik.http.routers.minio.rule: Host(`minio.${DOMAIN}`)
      traefik.http.services.minio.loadbalancer.server.port: 9001
      traefik.http.routers.minio.entrypoints: websecure
      traefik.http.routers.minio.tls: true
      traefik.http.routers.minio.tls.certResolver: letsencrypt

  ###
  # __  __          _ _
  # |  \/  |        | (_)
  # | \  / | ___  __| |_  __ _
  # | |\/| |/ _ \/ _` | |/ _` |
  # | |  | |  __/ (_| | | (_| |
  # |_|  |_|\___|\__,_|_|\__,_|
  ###

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    environment: *env-vars
    volumes:
      - config-scripts:/scripts
      - config-radarr:/config
      - media-movies:/movies
      - downloads:/downloads
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:7878"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.radarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/movies`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certResolver: letsencrypt

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    environment: *env-vars
    volumes:
      - config-scripts:/scripts
      - config-sonarr:/config
      - media-shows:/shows
      - downloads:/downloads
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8989"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.sonarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/shows`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certResolver: letsencrypt

  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    environment: *env-vars
    restart: unless-stopped
    volumes:
      - config-scripts:/scripts
      - config-lidarr:/config
      - media-music:/music
      - downloads:/downloads
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8686"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.lidarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/music`)
      traefik.http.services.lidarr.loadBalancer.server.port: 8686
      traefik.http.routers.lidarr.entrypoints: websecure
      traefik.http.routers.lidarr.tls: true
      traefik.http.routers.lidarr.tls.certResolver: letsencrypt

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment: *env-vars
    restart: unless-stopped
    volumes:
      - config-scripts:/scripts
      - config-readarr:/config
      - media-books:/books
      - downloads:/downloads
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8787"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.port: 5656
      traefik.http.routers.readarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/books`)
      traefik.http.services.readarr.loadBalancer.server.port: 8787
      traefik.http.routers.readarr.entrypoints: websecure
      traefik.http.routers.readarr.tls: true
      traefik.http.routers.readarr.tls.certResolver: letsencrypt

  ytdl_material:
    image: tzahi12345/youtubedl-material
    container_name: YoutubeDL
    environment:
      ALLOW_CONFIG_MUTATIONS: "true"
      ytdl_mongodb_connection_string: "mongodb://mongo:27017"
      ytdl_use_local_db: "false"
      write_ytdl_config: "true"
      ytdl_url: "https://request.${DOMAIN}/youtube/"
    restart: unless-stopped
    depends_on:
      - mongo
    volumes:
      - config-youtubedl-appdata:/app/appdata
      - config-youtubedl-subscriptions:/app/subscriptions
      - config-youtubedl-users:/app/users
      - media-music:/app/audio
      - media-youtube:/app/video
    networks:
      - internal
      - web
      - private_network
    <<: *dns
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:17442"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.youtube.rule: Host(`youtube.${DOMAIN}`)
      traefik.http.routers.youtube.entrypoints: websecure
      traefik.http.services.youtube.loadBalancer.server.port: 17442
      traefik.http.routers.youtube.tls: true
      traefik.http.routers.youtube.tls.certResolver: letsencrypt

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: unless-stopped
    environment: *env-vars
    <<: *networking
    <<: *logging
    volumes:
      - config-prowlarr:/config
    ports:
      - 9696:9696
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:9696"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.port: 9696
      traefik.http.routers.prowlarr.rule: Host(`indexers.${DOMAIN}`)
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certResolver: letsencrypt

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    restart: unless-stopped
    environment:
      <<: *env-vars
      WEBUI_PORT: 8980
    volumes:
      - config-qbittorrent:/config
      - downloads:/downloads
    ports:
      - 8980:8980
      - 6881:6881/tcp
      - 6881:6881/udp
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8980"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.qbittorrent.rule: Host(`downloads.${DOMAIN}`)
      traefik.http.routers.qbittorrent.entrypoints: websecure
      traefik.http.services.qbittorrent.loadbalancer.server.port: 8980
      traefik.http.services.qbittorrent.loadbalancer.passhostheader: false
      traefik.http.routers.qbittorrent.tls: true
      traefik.http.routers.qbittorrent.tls.certResolver: letsencrypt
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.X-Frame-Options: SAMEORIGIN
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Referer: ""
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Origin: ""
      traefik.http.routers.qbittorrent.middlewares: qbittorrent-headers,authelia@docker

  jellyseerr:
    image: fallenbagel/jellyseerr
    container_name: jellyseerr
    restart: unless-stopped
    environment: *env-vars
    <<: *networking
    <<: *logging
    volumes:
      - config-jellyseerr:/app/config
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5055",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.jellyseerr.rule: Host(`request.${DOMAIN}`)
      traefik.http.routers.jellyseerr.entrypoints: websecure
      traefik.http.services.jellyseerr.loadbalancer.server.port: 5055
      traefik.http.routers.jellyseerr.tls: true
      traefik.http.routers.jellyseerr.tls.certResolver: letsencrypt

  watch:
    container_name: watch
    image: lscr.io/linuxserver/jellyfin
    restart: unless-stopped
    environment:
      <<: *env-vars
      DOCKER_MODS: linuxserver/mods:jellyfin-amd
      JELLYFIN_PublishedServerUrl: ${IP}
    volumes:
      - config-jellyfin:/config
      - config-jellyfin-cache:/cache
      - media-movies:/Movies
      - media-shows:/Television Shows
      - media-music:/Music
      - media-youtube:/Youtube
    devices:
      - /dev/dri:/dev/dri
    ports:
      - 7359:7359/udp
      - 1900:1900/udp
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8096"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.services.watch.loadBalancer.server.port: 8096
      traefik.http.routers.watch.rule: Host(`watch.${DOMAIN}`)
      traefik.http.routers.watch.entrypoints: websecure
      traefik.http.routers.watch.tls: true
      traefik.http.routers.watch.tls.certResolver: letsencrypt
      traefik.http.middlewares.csp.headers.contentSecurityPolicy: >-
        default-src https: data: blob:; style-src 'self' 'unsafe-inline'
        https://ctalvio.github.io https://fonts.googleapis.com/css2
        https://cdn.jsdelivr.net https://raw.githubusercontent.com/danieladov;
        script-src 'self' 'unsafe-inline'
        https://www.gstatic.com/cv/js/sender/v1/cast_sender.js
        https://www.youtube.com/iframe_api https://s.ytimg.com worker-src 'self'
        blob:; connect-src 'self' https://raw.githubusercontent.com/danieladov;
        object-src 'none'; frame-ancestors 'self'
      traefik.http.routers.watch.middlewares: csp

  ###
  #   ____              _
  #  |  _ \            | |
  #  | |_) | ___   ___ | | _____
  #  |  _ < / _ \ / _ \| |/ / __|
  #  | |_) | (_) | (_) |   <\__ \
  #  |____/ \___/ \___/|_|\_\___/
  ###

  calibre:
    container_name: calibre
    image: lscr.io/linuxserver/calibre
    restart: unless-stopped
    environment: *env-vars
    volumes:
      - media-books:/config
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8080"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.calibre.rule: Host(`calibre.${DOMAIN}`)
      traefik.http.services.calibre.loadBalancer.server.port: 8080
      traefik.http.routers.calibre.entrypoints: websecure
      traefik.http.routers.calibre.tls: true
      traefik.http.routers.calibre.tls.certResolver: letsencrypt

  read:
    container_name: read
    image: lscr.io/linuxserver/calibre-web
    restart: unless-stopped
    environment:
      <<: *env-vars
      DOCKER_MODS: linuxserver/calibre-web:calibre
    volumes:
      - config-calibre-web:/config
      - media-books:/books
    <<: *networking
    <<: *logging
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8083"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.read.rule: Host(`read.${DOMAIN}`)
      traefik.http.services.read.loadBalancer.server.port: 8083
      traefik.http.routers.read.entrypoints: websecure
      traefik.http.routers.read.tls: true
      traefik.http.routers.read.tls.certResolver: letsencrypt

  ###
  #   _____        _        _
  #  |  __ \      | |      | |
  #  | |  | | __ _| |_ __ _| |__   __ _ ___  ___  ___
  #  | |  | |/ _` | __/ _` | '_ \ / _` / __|/ _ \/ __|
  #  | |__| | (_| | || (_| | |_) | (_| \__ \  __/\__ \
  #  |_____/ \__,_|\__\__,_|_.__/ \__,_|___/\___||___/
  ###

  todo-db:
    image: lscr.io/linuxserver/mariadb
    container_name: todo-db
    restart: unless-stopped
    volumes:
      - config-vikunja-db:/config
    environment:
      <<: *env-vars
      MYSQL_DATABASE: ${TODO_DATABASE}
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    networks:
      - internal
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '/usr/bin/mysql --user=${DATABASE_USERNAME}
          --password=${DATABASE_PASSWORD} --execute "SHOW DATABASES;"',
        ]
      interval: 3s
      timeout: 1s
      retries: 5
    <<: *logging
    labels:
      traefik.enable: false

  mongo:
    image: mongo
    container_name: mongo
    logging:
      driver: none
    networks:
      - internal
    restart: unless-stopped
    volumes:
      - config-mongo:/data/db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'echo ''db.runCommand("ping").ok'' | mongosh localhost:27017/test
          --quiet',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    <<: *logging
    labels:
      traefik.enable: false

  wiki_redis:
    image: redis
    container_name: wiki_redis
    networks:
      - internal
    command: ["redis-server"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3
    <<: *logging
    labels:
      traefik.enable: false

  wiki_db:
    image: postgres
    container_name: wiki_db
    networks:
      - internal
    volumes:
      - config-outline-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: outline
    <<: *logging
    labels:
      traefik.enable: false

  auth_db:
    image: postgres
    container_name: auth_db
    networks:
      - internal
    volumes:
      - config-auth-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: auth
    <<: *logging
    labels:
      traefik.enable: false

  pocket_db:
    image: postgres
    container_name: pocket_db
    networks:
      - internal
    volumes:
      - config-pocket-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME}"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: wallabag
    <<: *logging
    labels:
      traefik.enable: false
