version: '3.7'

networks:
        web:
                external: true
        internal:
                external: false
        private_network:
                ipam:
                        driver: default
                        config:
                                - subnet: 10.2.0.0/24

volumes:
        config-adguard:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/adguard
                        o: bind
        config-bookstack:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/bookstack
                        o: bind
        config-calibre-web:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/calibre-web
                        o: bind
        config-code:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/code
                        o: bind
        config-dnscrypt:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/dnscrypt
                        o: bind
        config-grafana:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/grafana/config
                        o: bind
        config-grafana-data:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/grafana/data
                        o: bind
        config-grafana-home:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/grafana/home
                        o: bind
        config-heimdall:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/heimdall
                        o: bind
        config-jellyfin:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/jellyfin
                        o: bind
        config-jellyfin-cache:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/jellyfin/cache
                        o: bind
        config-lidarr:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/lidarr
                        o: bind
        config-mariadb:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/mariadb
                        o: bind
        config-mongo:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/mongo
                        o: bind
        config-portainer:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/portainer
                        o: bind
        config-prometheus:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/prometheus
                        o: bind
        config-prowlarr:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/prowlarr
                        o: bind
        config-qbittorrent:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/qbittorrent
                        o: bind
        config-radarr:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/radarr
                        o: bind
        config-readarr:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/readarr
                        o: bind
        config-sonarr:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/sonarr
                        o: bind
        config-syncthing:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/syncthing
                        o: bind
        config-unbound:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/unbound
                        o: bind
        config-vaultwarden:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/vaultwarden
                        o: bind
        config-youtubedl-appdata:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/youtube/appdata
                        o: bind
        config-youtubedl-subscriptions:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/youtube/subscriptions
                        o: bind
        config-youtubedl-users:
                driver_opts:
                        type: none
                        device: ${CONFIG_DIR}/youtube/users
                        o: bind
        downloads:
                driver_opts:
                        type: none
                        device: ${DOWNLOAD_DIR}
                        o: bind
        media-books:
                driver_opts:
                        type: none
                        device: ${DATA_DIR}/Books
                        o: bind
        media-movies:
                driver_opts:
                        type: none
                        device: ${DATA_DIR}/Movies
                        o: bind
        media-music:
                driver_opts:
                        type: none
                        device: ${DATA_DIR}/Music
                        o: bind
        media-shows:
                driver_opts:
                        type: none
                        device: ${DATA_DIR}/Television Shows
                        o: bind
        media-youtube:
                driver_opts:
                        type: none
                        device: ${DATA_DIR}/Youtube
                        o: bind
        sync:
                driver_opts:
                        type: none
                        device: ${SYNC_DIR}
                        o: bind

x-common-variables:
        &env-vars
        PUID: ${PUID}
        PGID: ${PGID}
        TZ: ${TIMEZONE}

services:
        traefik:
                container_name: traefik
                image: traefik:latest
                restart: unless-stopped
                command:
                        - "--api=true"
                        - "--api.dashboard=true"
                        - "--entrypoints.http.address=:80"
                        - "--log.level=DEBUG"
                        - "--ping=true"
                        - "--metrics.prometheus=true"
                        - "--providers.docker=true"
                        - "--providers.docker.watch=true"
                        - "--providers.docker.exposedbydefault=true"
                ports:
                        - 80:80
                        - 8080:8080
                        - 8888:8888
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock
                networks:
                        - web
                        - internal
                        - private_network
                healthcheck:
                        test: [ "CMD", "traefik", "healthcheck", "--ping" ]
                        interval: 30s
                        timeout: 3s
                        retries: 3
                labels:
                        traefik.http.routers.dashboard.rule: Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
                        traefik.http.routers.dashboard.service: api@internal
                        plugsy.name: Traefik
                        plugsy.category: System

        prometheus:
                image: prom/prometheus
                container_name: prometheus
                restart: unless-stopped
                networks:
                        - web
                command:
                        - "--config.file=/etc/prometheus/prometheus.yml"
                        - "--storage.tsdb.path=/prometheus"
                volumes:
                        - config-prometheus:/etc/prometheus
                ports:
                        - 9090:9090
                healthcheck:
                        test: [ "CMD", "wget --spider http://localhost:9090 || exit 1" ]
                        interval: 10s
                        timeout: 15s
                        retries: 10
                        start_period: 40s
                labels:
                        traefik.port: 9090
                        traefik.http.routers.prometheus.rule: Host(`prometheus.${DOMAIN}`)
                        traefik.backend: prometheus
                        plugsy.name: Prometheus
                        plugsy.category: Metrics
                        plugsy.link: http://prometheus.${DOMAIN}

        grafana:
                image: grafana/grafana
                container_name: grafana
                restart: unless-stopped
                networks:
                        - web
                ports:
                        - 3001:3000
                user: '104'
                environment:
                        GF_SERVER_ROOT_URL: http://metrics.${DOMAIN}
                volumes:
                        - config-grafana:/etc/grafana
                        - config-grafana-data:/var/lib/grafana
                        - config-grafana-home:/usr/share/grafana
                healthcheck:
                        test: [ "CMD", "wget --spider http://localhost:3000 || exit 1" ]
                        interval: 10s
                        timeout: 15s
                        retries: 10
                        start_period: 40s
                labels:
                        traefik.port: 3001
                        traefik.http.routers.grafana.rule: Host(`metrics.${DOMAIN}`)
                        plugsy.name: Grafana
                        plugsy.category: Metrics
                        plugsy.link: http://metrics.${DOMAIN}

        plugsy:
                container_name: plugsy
                image: plugsy/core
                restart: unless-stopped
                networks:
                        - web
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock
                ports:
                        - 8000:3000
                labels:
                        traefik.port: 8000
                        traefik.http.routers.plugsy.rule: Host(`plugins.${DOMAIN}`)

        portainer:
                image: portainer/portainer-ce
                container_name: portainer
                restart: unless-stopped
                security_opt:
                        - no-new-privileges:true
                volumes:
                        - /var/run/docker.sock:/var/run/docker.sock
                        - config-portainer:/data
                ports:
                        - 9000:9000
                networks:
                        - web
                        - internal
                labels:
                        traefik.port: 9000
                        traefik.http.routers.portainer.rule: Host(`portainer.${DOMAIN}`)
                        traefik.http.services.portainer.loadbalancer.server.port: 9000
                        plugsy.name: Portainer
                        plugsy.category: System
                        plugsy.link: http://portainer.${DOMAIN}

        heimdall:
                image: lscr.io/linuxserver/heimdall
                container_name: heimdall
                restart: unless-stopped
                networks:
                        - web
                volumes:
                        - config-heimdall:/config
                ports:
                        - 83:80
                environment: *env-vars
                labels:
                        traefik.port: 83
                        traefik.http.routers.heimdall.rule: Host(`dash.${DOMAIN}`)
                        plugsy.name: Heimdall
                        plugsy.category: System
                        plugsy.link: http://dash.${DOMAIN}

        vaultwarden:
                image: vaultwarden/server
                container_name: vaultwarden
                restart: unless-stopped
                networks:
                        - web
                volumes:
                        - config-vaultwarden:/data
                ports:
                        - 84:80
                environment:
                        <<: *env-vars
                        DOMAIN: "http://vault.${DOMAIN}"
                        ADMIN_TOKEN: ${VAULTWARDEN_TOKEN}
                labels:
                        traefik.port: 84
                        traefik.http.routers.vaultwarden.rule: Host(`vault.${DOMAIN}`)
                        traefik.http.services.vaultwarden.loadbalancer.server.port: 84
                        plugsy.name: Vaultwarden
                        plugsy.category: System
                        plugsy.link: http://vault.${DOMAIN}

        unbound:
                image: mvance/unbound
                container_name: unbound
                hostname: unbound
                restart: always
                networks:
                        private_network:
                                ipv4_address: 10.2.0.200
                volumes:
                        - config-unbound:/opt/unbound/etc/unbound/
                environment: *env-vars
                labels:
                        traefik.enable: false
                        plugsy.name: Unbound
                        plugsy.category: Privacy

        dnscrypt:
                image: zquestz/dnscrypt-server:latest
                container_name: dnscrypt
                restart: always
                command: "init -N ${DOMAIN} -E '10.2.0.150:5443'"
                networks:
                        private_network:
                                ipv4_address: 10.2.0.150
                ports:
                        - 5443:5443/udp
                        - 5443:5443/tcp
                volumes:
                        - config-dnscrypt:/opt/encrypted-dns/etc/keys
                environment: *env-vars
                healthcheck:
                        test:
                                [
                                        "CMD-SHELL",
                                        "drill -p 553 one.one.one.one @127.0.0.1 || exit 1"
                                ]
                        interval: 1m30s
                        timeout: 30s
                        retries: 5
                        start_period: 30s
                labels:
                        traefik.enable: false
                        plugsy.name: DNSCrypt
                        plugsy.category: Privacy

        adguard:
                container_name: adguard
                image: adguard/adguardhome
                restart: always
                depends_on:
                        - unbound
                        - dnscrypt
                volumes:
                        - config-adguard:/opt/adguardhome/conf
                dns:
                        - 127.0.0.1
                        - 10.2.0.200
                        - 10.2.0.150
                networks:
                        private_network:
                                ipv4_address: 10.2.0.100
                ports:
                        - 53:53/tcp
                        - 53:53/udp
                        - 443:443/tcp
                        - 443:443/udp
                        - 3000:3000/tcp
                healthcheck:
                        test: [ "CMD-SHELL", "/bin/netstat -pant | /bin/grep :53" ]
                        interval: 45s
                        timeout: 30s
                        retries: 3
                labels:
                        traefik.port: 3000
                        traefik.http.routers.adguard.rule: Host(`dns.${DOMAIN}`)
                        traefik.http.services.adguard.loadbalancer.server.port: 3000
                        plugsy.name: AdGuard
                        plugsy.link: http://dns.${DOMAIN}/
                        plugsy.category: Privacy
                        plugsy.parents: Unbound,DNSCrypt

        adguard_exporter:
                image: ebrianne/adguard-exporter
                container_name: adguard-exporter
                restart: unless-stopped
                networks:
                        - web
                depends_on:
                        - adguard
                ports:
                        - 9617:9617
                environment:
                        adguard_protocol: http
                        adguard_hostname: dns.${DOMAIN}
                        adguard_username: ${ADGUARD_USERNAME}
                        adguard_password: ${ADGUARD_PASSWORD}
                        server_port: 9617
                        interval: 10s
                        log_limit: 10000
                labels:
                        traefik.enable: false
                        plugsy.name: AdGuard Exporter
                        plugsy.category: Metrics
                        plugsy.parents: AdGuard

        qbittorrent-exporter:
                image: caseyscarborough/qbittorrent-exporter
                container_name: qbittorrent-exporter
                networks:
                        - web
                ports:
                        - 9618:17871
                environment:
                        QBITTORRENT_PORT: 80
                        QBITTORRENT_HOST: request.${DOMAIN}
                        QBITTORRENT_USERNAME: ${QBITTORRENT_USERNAME}
                        QBITTORRENT_PASSWORD: ${QBITTORRENT_PASSWORD}
                labels:
                        traefik.enable: false
                        plugsy.name: qBittorrent Exporter
                        plugsy.category: Metrics
                        plugsy.parents: qBittorrent

        node_exporter:
                image: quay.io/prometheus/node-exporter
                container_name: node-exporter
                command:
                        - '--path.rootfs=/host'
                networks:
                        - web
                pid: host
                restart: unless-stopped
                ports:
                        - 9619:9100
                volumes:
                        - '/:/host:ro,rslave'
                labels:
                        traefik.enable: false
                        plugsy.name: Host Exporter
                        plugsy.category: Metrics

        cloud:
                container_name: cloud
                image: nextcloud
                restart: unless-stopped
                depends_on:
                        - mariadb
                environment:
                        MYSQL_HOST: ${DATABASE_HOST}
                        MYSQL_DATABASE: ${DATABASE}
                        MYSQL_USER: ${DATABASE_USERNAME}
                        MYSQL_PASSWORD: ${DATABASE_PASSWORD}
                ports:
                        - 8081:80
                networks:
                        - web
                        - internal
                labels:
                        traefik.port: 8081
                        traefik.http.routers.cloud.rule: Host(`cloud.${DOMAIN}`)
                        plugsy.name: NextCloud
                        plugsy.category: Cloud
                        plugsy.parents: MariaDB
                        plugsy.link: http://cloud.${DOMAIN}

        wiki:
                container_name: wiki
                image: lscr.io/linuxserver/bookstack
                restart: unless-stopped
                depends_on:
                        - database
                environment:
                        <<: *env-vars
                        APP_URL: http://wiki.${DOMAIN}
                        DB_HOST: ${DATABASE_HOST}
                        DB_DATABASE: ${DATABASE}
                        DB_USER: ${DATABASE_USERNAME}
                        DB_PASS: ${DATABASE_PASSWORD}
                volumes:
                        - config-bookstack:/config
                ports:
                        - 6875:80
                networks:
                        - web
                        - internal
                labels:
                        traefik.port: 6875
                        traefik.http.routers.wiki.rule: Host(`wiki.${DOMAIN}`)
                        plugsy.name: Personal Wiki
                        plugsy.category: Cloud
                        plugsy.parents: MariaDB
                        plugsy.link: http://wiki.${DOMAIN}

        code-server:
                image: lscr.io/linuxserver/openvscode-server:latest
                container_name: code-server
                restart: unless-stopped
                mem_limit: 4096M
                cpu_percent: 50
                networks:
                        - web
                environment:
                        <<: *env-vars
                        CONNECTION_TOKEN: ${CODE_PASSWORD}
                        SUDO_PASSWORD: ${CODE_SUDO_PASSWORD}
                        PROXY_DOMAIN: dev.${DOMAIN}
                volumes:
                        - config-code:/config
                        - sync:/sync
                ports:
                        - 8443:8443
                labels:
                        traefik.port: 8443
                        traefik.http.routers.code.rule: Host(`dev.${DOMAIN}`)
                        plugsy.name: Code Server
                        plugsy.category: Cloud
                        plugsy.link: http://dev.${DOMAIN}

        radarr:
                image: lscr.io/linuxserver/radarr:latest
                container_name: radarr
                restart: unless-stopped
                environment: *env-vars
                volumes:
                        - config-radarr:/config
                        - media-movies:/movies
                        - downloads:/downloads
                ports:
                        - 7878:7878
                networks:
                        - web
                labels:
                        traefik.port: 7878
                        traefik.http.routers.radarr.rule: Host(`request.${DOMAIN}`) && PathPrefix(`/movies`)
                        plugsy.name: Radarr
                        plugsy.category: Media
                        plugsy.link: http://request.${DOMAIN}/movies

        sonarr:
                image: lscr.io/linuxserver/sonarr:latest
                container_name: sonarr
                restart: unless-stopped
                environment: *env-vars
                volumes:
                        - config-sonarr:/config
                        - media-shows:/shows
                        - downloads:/downloads
                ports:
                        - 8989:8989
                networks:
                        - web
                labels:
                        traefik.port: 8989
                        traefik.http.routers.sonarr.rule: Host(`request.${DOMAIN}`) && PathPrefix(`/shows`)
                        plugsy.name: Sonarr
                        plugsy.category: Media
                        plugsy.link: http://request.${DOMAIN}/shows

        lidarr:
                image: lscr.io/linuxserver/lidarr:latest
                container_name: lidarr
                environment: *env-vars
                volumes:
                        - config-lidarr:/config
                        - media-music:/music
                        - downloads:/downloads
                ports:
                        - 6767:8686
                restart: unless-stopped
                networks:
                        - web
                labels:
                        traefik.port: 6767
                        traefik.http.routers.lidarr.rule: Host(`request.${DOMAIN}`) && PathPrefix(`/music`)
                        plugsy.name: Lidarr
                        plugsy.category: Media
                        plugsy.link: http://request.${DOMAIN}/music

        readarr:
                image: lscr.io/linuxserver/readarr:develop
                container_name: readarr
                environment: *env-vars
                volumes:
                        - config-readarr:/config
                        - media-books:/books
                        - downloads:/downloads
                ports:
                        - 5656:8787
                restart: unless-stopped
                networks:
                        - web
                labels:
                        traefik.port: 5656
                        traefik.http.routers.readarr.rule: Host(`request.${DOMAIN}`) && PathPrefix(`/books`)
                        plugsy.name: Readarr
                        plugsy.category: Media
                        plugsy.link: http://request.${DOMAIN}/books

        ytdl_material:
                image: tzahi12345/youtubedl-material:latest
                container_name: YoutubeDL
                environment:
                        ALLOW_CONFIG_MUTATIONS: 'true'
                        ytdl_mongodb_connection_string: 'mongodb://mongo:27017'
                        ytdl_use_local_db: 'false'
                        write_ytdl_config: 'true'
                        ytdl_url: 'http://request.${DOMAIN}/youtube/'
                restart: unless-stopped
                depends_on:
                        - mongo
                volumes:
                        - config-youtubedl-appdata:/app/appdata
                        - config-youtubedl-subscriptions:/app/subscriptions
                        - config-youtubedl-users:/app/users
                        - media-music:/app/audio
                        - media-youtube:/app/video
                ports:
                        - 8998:17442
                networks:
                        - internal
                        - web
                labels:
                        traefik.port: 8998
                        traefik.http.routers.youtube.rule: Host(`youtube.${DOMAIN}`)
                        plugsy.name: YoutubeDL Material
                        plugsy.category: Media
                        plugsy.parents: MongoDB
                        plugsy.link: http://youtube.${DOMAIN}

        prowlarr:
                image: lscr.io/linuxserver/prowlarr:develop
                container_name: prowlarr
                restart: unless-stopped
                environment: *env-vars
                networks:
                        - web
                volumes:
                        - config-prowlarr:/config
                ports:
                        - 9696:9696
                labels:
                        traefik.port: 9696
                        traefik.http.routers.prowlarr.rule: Host(`request.${DOMAIN}`) && PathPrefix(`/indexers`)
                        plugsy.name: Prowlarr
                        plugsy.category: Media
                        plugsy.link: http://request.${DOMAIN}/indexers

        qbittorrent:
                image: lscr.io/linuxserver/qbittorrent:latest
                container_name: qbittorrent
                restart: unless-stopped
                environment:
                        <<: *env-vars
                        WEBUI_PORT: 8980
                volumes:
                        - config-qbittorrent:/config
                        - downloads:/downloads
                ports:
                        - 8980:8980
                        - 6881:6881
                        - 6881:6881/udp
                networks:
                        - web
                labels:
                        traefik.port: 8980
                        traefik.http.routers.qbittorrent.rule: Host(`request.${DOMAIN}`)
                        traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.X-Frame-Options: SAMEORIGIN
                        traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Referer: ""
                        traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Origin: ""
                        traefik.http.routers.qbittorrent.middlewares: qbittorrent-headers
                        traefik.http.services.qbittorrent.loadbalancer.server.port: 8980
                        traefik.http.services.qbittorrent.loadbalancer.passhostheader: false
                        plugsy.name: qBittorrent
                        plugsy.category: Media
                        plugsy.link: http://request.${DOMAIN}/

        watch:
                container_name: watch
                image: lscr.io/linuxserver/jellyfin
                restart: unless-stopped
                mem_limit: 4096M
                cpu_percent: 75
                environment:
                        <<: *env-vars
                        DOCKER_MODS: linuxserver/mods:jellyfin-opencl-intel
                volumes:
                        - config-jellyfin:/config
                        - config-jellyfin-cache:/cache
                        - media-movies:/Movies
                        - media-shows:/Television Shows
                        - media-music:/Music
                        - media-youtube:/Youtube
                devices:
                        - /dev/dri/renderD128:/dev/dri/renderD128
                        - /dev/dri/card0:/dev/dri/card0
                ports:
                        - 8920:8920
                networks:
                        - web
                healthcheck:
                        test: [ "CMD-SHELL", "curl --fail localhost:8096" ]
                        interval: 1m30s
                        timeout: 30s
                        retries: 5
                        start_period: 30s
                labels:
                        traefik.port: 8920
                        traefik.http.routers.watch.rule: Host(`watch.${DOMAIN}`)
                        plugsy.name: Jellyfin
                        plugsy.category: Media
                        plugsy.link: http://watch.${DOMAIN}

        sync:
                container_name: sync
                image: lscr.io/linuxserver/syncthing
                restart: unless-stopped
                environment: *env-vars
                volumes:
                        - config-syncthing:/config
                        - sync:/config/Sync
                ports:
                        - 8384:8384
                        - 22000:22000
                        - 21027:21027/udp
                networks:
                        - web
                healthcheck:
                        test: nc -z 127.0.0.1 8384 || exit 1
                        interval: 30s
                        timeout: 3s
                        retries: 3
                labels:
                        traefik.port: 8384
                        traefik.http.routers.sync.rule: Host(`sync.${DOMAIN}`)
                        plugsy.name: Syncthing
                        plugsy.category: Cloud
                        plugsy.link: http://sync.${DOMAIN}

        calibre:
                container_name: calibre
                image: lscr.io/linuxserver/calibre
                restart: unless-stopped
                environment: *env-vars
                volumes:
                        - media-books:/config
                ports:
                        - 8082:8080
                        - 8083:8081
                networks:
                        - web
                labels:
                        traefik.port: 8082
                        traefik.http.routers.calibre.rule: Host(`calibre.${DOMAIN}`)
                        plugsy.name: Calibre
                        plugsy.category: System

        read:
                container_name: read
                image: lscr.io/linuxserver/calibre-web
                restart: unless-stopped
                environment:
                        <<: *env-vars
                        DOCKER_MODS: linuxserver/calibre-web:calibre
                volumes:
                        - config-calibre-web:/config
                        - media-books:/books
                ports:
                        - 8084:8083
                networks:
                        - web
                labels:
                        traefik.port: 8084
                        traefik.http.routers.read.rule: Host(`read.${DOMAIN}`)
                        plugsy.name: Calibre Web
                        plugsy.category: Media
                        plugsy.link: http://read.${DOMAIN}

        mariadb:
                image: lscr.io/linuxserver/mariadb
                container_name: mariadb
                restart: unless-stopped
                volumes:
                        - config-mariadb:/config
                ports:
                        - 3306:3306
                environment:
                        <<: *env-vars
                        MYSQL_DATABASE: ${DATABASE}
                        MYSQL_USER: ${DATABASE_USERNAME}
                        MYSQL_PASSWORD: ${DATABASE_PASSWORD}
                        MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
                networks:
                        - internal
                labels:
                        traefik.enable: false
                        plugsy.name: MariaDB
                        plugsy.category: System

        mongo:
                image: mongo
                container_name: mongo
                ports:
                        - 27017:27017
                logging:
                        driver: none
                networks:
                        - internal
                restart: unless-stopped
                volumes:
                        - config-mongo:/data/db
                labels:
                        traefik.enable: false
                        plugsy.name: MongoDB
                        plugsy.category: System
