x-common-media: &media
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    <<: *common
    volumes:
      - config-scripts:/scripts
      - config-radarr:/config
      - media:/media
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:7878"]
      <<: *healthcheck
    labels:
      traefik.http.routers.radarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/movies`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certResolver: letsencrypt
      traefik.http.routers.radarr.middlewares: auth@file

  sonarr:
    image: lscr.io/linuxserver/sonarr:develop
    container_name: sonarr
    <<: *common
    volumes:
      - config-scripts:/scripts
      - config-sonarr:/config
      - media:/media
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8989"]
      <<: *healthcheck
    labels:
      traefik.http.routers.sonarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/shows`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certResolver: letsencrypt
      traefik.http.routers.sonarr.middlewares: auth@file

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    <<: *common
    volumes:
      - config-scripts:/scripts
      - config-readarr:/config
      - media:/media
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8787"]
      <<: *healthcheck
    labels:
      traefik.http.routers.readarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/books`)
      traefik.http.services.readarr.loadBalancer.server.port: 8787
      traefik.http.routers.readarr.entrypoints: websecure
      traefik.http.routers.readarr.tls: true
      traefik.http.routers.readarr.tls.certResolver: letsencrypt
      traefik.http.routers.readarr.middlewares: auth@file

  metube:
    image: alexta69/metube
    container_name: youtube
    <<: *common
    volumes:
      - media-youtube:/downloads
    environment:
      <<: *env-vars
      OUTPUT_TEMPLATE: "%(uploader)s - %(upload_date)s - %(title)s [%(id)s].%(ext)s"
      YTDL_OPTIONS: '{ "writeinfojson": true, "updatetime": false, "prefer_free_formats": true, "concurrent_fragment_downloads": 3, "ignoreerrors": true, "check_formats": true, "postprocessors": [{ "key": "Exec", "exec_cmd": "chmod 0664", "when": "after_move" }, { "key": "FFmpegMetadata", "add_chapters": true }] }'
      DEFAULT_THEME: dark
    labels:
      traefik.http.routers.youtube.entrypoints: websecure
      traefik.http.services.youtube.loadBalancer.server.port: 8081
      traefik.http.routers.youtube.tls: true
      traefik.http.routers.youtube.tls.certResolver: letsencrypt
      traefik.http.routers.youtube.middlewares: auth@file

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: indexers
    <<: *common
    volumes:
      - config-prowlarr:/config
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:9696"]
      <<: *healthcheck
    labels:
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certResolver: letsencrypt
      traefik.http.routers.prowlarr.middlewares: auth@file

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr
    container_name: recyclarr
    <<: *common
    depends_on:
      - sonarr
      - radarr
    user: ${PUID}:${PGID}
    volumes:
      - config-recyclarr:/config
    labels:
      traefik.enable: false

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr
    container_name: flaresolverr
    <<: *common
    environment:
      <<: *env-vars
      PROMETHEUS_ENABLED: true
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8191/health"]
      <<: *healthcheck
    labels:
      traefik.enable: false

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: downloads
    <<: *common
    environment:
      <<: *env-vars
      WEBUI_PORT: 8980
      DOCKER_MODS: linuxserver/mods:universal-stdout-logs
      LOGS_TO_STDOUT: "/config/qBittorrent/logs/qbittorrent.log"
    deploy:
      resources:
        limits:
          memory: 8G
    volumes:
      - config-qbittorrent:/config
      - media:/media
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8980"]
      <<: *healthcheck
    labels:
      traefik.http.routers.qbittorrent.entrypoints: websecure
      traefik.http.services.qbittorrent.loadbalancer.server.port: 8980
      traefik.http.services.qbittorrent.loadbalancer.passhostheader: false
      traefik.http.routers.qbittorrent.tls: true
      traefik.http.routers.qbittorrent.tls.certResolver: letsencrypt
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.X-Frame-Options: SAMEORIGIN
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Referer: ""
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Origin: ""
      traefik.http.routers.qbittorrent.middlewares: qbittorrent-headers,auth@file

  jellyseerr:
    image: ghcr.io/fallenbagel/jellyseerr:develop
    container_name: request
    <<: *common
    volumes:
      - config-jellyseerr:/app/config
    environment:
      <<: *env-vars
      LOG_LEVEL: debug
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5055",
        ]
      <<: *healthcheck
    labels:
      traefik.http.routers.jellyseerr.entrypoints: websecure
      traefik.http.services.jellyseerr.loadbalancer.server.port: 5055
      traefik.http.routers.jellyseerr.tls: true
      traefik.http.routers.jellyseerr.tls.certResolver: letsencrypt

  watch:
    container_name: watch
    image: lscr.io/linuxserver/jellyfin
    <<: *common
    environment:
      <<: *env-vars
      DOCKER_MODS: linuxserver/mods:jellyfin-amd|linuxserver/mods:universal-package-install
      INSTALL_PACKAGES: python3
      INSTALL_PIP_PACKAGES: yt-dlp
      JELLYFIN_PublishedServerUrl: https://watch.${DOMAIN}
      JELLYFIN_FFmpeg__probesize: 50000000
      JELLYFIN_FFmpeg__analyzeduration: 2000000000
    healthcheck:
      test:
        [ "CMD-SHELL", "curl -i --fail http://localhost:8096/health"]
      <<: *healthcheck
    volumes:
      - config-jellyfin:/config
      - config-jellyfin-cache:/cache
      - media:/media
    group_add:
      - "989" # getent group render | cut -d: -f3
      - "986" # getent group video | cut -d: -f3
      - video
    security_opt:
      - seccomp:unconfined
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/kfd:/dev/kfd
    labels:
      traefik.http.services.watch.loadBalancer.server.port: 8096
      traefik.http.routers.watch.entrypoints: websecure
      traefik.http.routers.watch.tls: true
      traefik.http.routers.watch.tls.certResolver: letsencrypt
      traefik.http.middlewares.csp.headers.customResponseHeaders.Content-Security-Policy-Report-Only: >-
        default-src https: data: blob:;
        style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://site-assets.fontawesome.com https://fonts.googleapis.com https://ctalvio.github.io;
        script-src 'self' 'unsafe-inline' blob:;
        worker-src 'self' blob:; connect-src 'self' https:;
        object-src 'none'; frame-ancestors 'self'
      traefik.http.routers.watch.middlewares: csp

  podgrab:
    image: akhilrex/podgrab
    container_name: podcasts
    <<: *common
    environment:
      <<: *env-vars
      CHECK_FREQUENCY: 240
    volumes:
      - config-podgrab:/config
      - media-podcasts:/assets
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080",
        ]
      <<: *healthcheck
    labels:
      traefik.http.services.podgrab.loadBalancer.server.port: 8080
      traefik.http.routers.podgrab.entrypoints: websecure
      traefik.http.routers.podgrab.tls: true
      traefik.http.routers.podgrab.tls.certResolver: letsencrypt
      traefik.http.routers.podgrab.middlewares: auth@file

  calibre:
    container_name: calibre
    image: lscr.io/linuxserver/calibre
    <<: *common
    volumes:
      - media-books:/config
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8080"]
      <<: *healthcheck
    labels:
      traefik.http.services.calibre.loadBalancer.server.port: 8080
      traefik.http.routers.calibre.entrypoints: websecure
      traefik.http.routers.calibre.tls: true
      traefik.http.routers.calibre.tls.certResolver: letsencrypt
      traefik.http.routers.calibre.middlewares: auth@file

  beets:
    image: lscr.io/linuxserver/beets:nightly
    container_name: beets
    <<: *common
    volumes:
      - config-beets:/config
      - media:/media
    labels:
      traefik.enable: false

  title-card-maker:
    image: collinheist/titlecardmaker
    container_name: title-card-maker
    restart: unless-stopped
    <<: *logging
    networks:
      - internal
    command: python3 main.py --run
    volumes:
      - config-title:/config
      - config-title-logs:/maker/logs
      - media:/media
    deploy:
      resources:
        limits:
          cpus: '6'
    environment:
      <<: *env-vars
      TCM_MISSING: /config/missing.yml
      TCM_RUNTIME: 23:00
      TCM_FREQUENCY: 30m
    labels:
      traefik.enable: false

  immich:
    image: ghcr.io/imagegenius/immich
    container_name: photos
    <<: *common
    environment:
      <<: *env-vars
      DB_HOSTNAME: pg-vectors
      DB_USERNAME: immich
      DB_PASSWORD: ${DATABASE_PASSWORD}
      DB_DATABASE_NAME: immich
      DB_PORT: 5432
      REDIS_HOSTNAME: redis
      REDIS_PORT: 6379
      MACHINE_LEARNING_WORKERS: 1
      MACHINE_LEARNING_WORKER_TIMEOUT: 120
    devices:
      - /dev/dri:/dev/dri
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8080/api/server-info/ping | grep 'pong' || exit 1"]
      <<: *healthcheck
    depends_on:
      - pg-vectors
      - redis
    volumes:
      - config-immich:/config
      - media-photos:/photos
    labels:
      traefik.http.services.immich.loadBalancer.server.port: 8080
      traefik.http.routers.immich.entrypoints: websecure
      traefik.http.routers.immich.tls: true
      traefik.http.routers.immich.tls.certResolver: letsencrypt

