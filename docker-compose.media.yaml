x-common-media: &media
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    <<: *common
    volumes:
      - config-scripts:/scripts
      - config-radarr:/config
      - media-movies:/movies
      - downloads:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:7878"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.radarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/movies`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certResolver: letsencrypt
      traefik.http.routers.radarr.middlewares: authelia

  sonarr:
    image: lscr.io/linuxserver/sonarr:develop
    container_name: sonarr
    <<: *common
    volumes:
      - config-scripts:/scripts
      - config-sonarr:/config
      - media-shows:/shows
      - downloads:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8989"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.sonarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/shows`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certResolver: letsencrypt
      traefik.http.routers.sonarr.middlewares: authelia

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    hostname: readarr.${DOMAIN}
    <<: *common
    volumes:
      - config-scripts:/scripts
      - config-readarr:/config
      - media-books:/books
      - downloads:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8787"]
      interval: 45s
      timeout: 30s
      retries: 3
    labels:
      traefik.http.routers.readarr.rule:
        Host(`request.${DOMAIN}`) && PathPrefix(`/books`)
      traefik.http.services.readarr.loadBalancer.server.port: 8787
      traefik.http.routers.readarr.entrypoints: websecure
      traefik.http.routers.readarr.tls: true
      traefik.http.routers.readarr.tls.certResolver: letsencrypt
      traefik.http.routers.readarr.middlewares: authelia

  metube:
    image: alexta69/metube
    container_name: youtube
    hostname: youtube.${DOMAIN}
    <<: *common
    volumes:
      - media-youtube:/downloads
    environment:
      <<: *env-vars
      OUTPUT_TEMPLATE: "%(uploader)s - %(upload_date)s - %(title)s [%(id)s].%(ext)s"
      YTDL_OPTIONS: '{ "writeinfojson": true, "updatetime": false, "postprocessors": [{ "key": "Exec", "exec_cmd": "chmod 0664", "when": "after_move" }] }'
    labels:
      traefik.http.routers.youtube.rule: Host(`youtube.${DOMAIN}`)
      traefik.http.routers.youtube.entrypoints: websecure
      traefik.http.services.youtube.loadBalancer.server.port: 8081
      traefik.http.routers.youtube.tls: true
      traefik.http.routers.youtube.tls.certResolver: letsencrypt
      traefik.http.routers.youtube.middlewares: authelia

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    hostname: prowlarr.${DOMAIN}
    <<: *common
    volumes:
      - config-prowlarr:/config
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:9696"]
      interval: 45s
      timeout: 30s
      retries: 3
    ports:
      - 9696:9696
    labels:
      traefik.http.routers.prowlarr.rule: Host(`indexers.${DOMAIN}`)
      traefik.http.routers.prowlarr.entrypoints: websecure
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.tls: true
      traefik.http.routers.prowlarr.tls.certResolver: letsencrypt
      traefik.http.routers.prowlarr.middlewares: authelia

  recyclarr:
    image: ghcr.io/recyclarr/recyclarr
    container_name: recyclarr
    hostname: recyclarr.${DOMAIN}
    depends_on:
      - sonarr
      - radarr
    <<: *common
    user: ${PUID}:${PGID}
    volumes:
      - config-recyclarr:/config
    labels:
      traefik.enable: false

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:v3.3.2
    container_name: flaresolverr
    <<: *common
    labels:
      traefik.enable: false

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent
    container_name: qbittorrent
    hostname: downloads.${DOMAIN}
    <<: *common
    environment:
      <<: *env-vars
      WEBUI_PORT: 8980
      DOCKER_MODS: linuxserver/mods:universal-stdout-logs
      LOGS_TO_STDOUT: "/config/qBittorrent/logs/qbittorrent.log"
    volumes:
      - config-qbittorrent:/config
      - downloads:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8980"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.qbittorrent.rule: Host(`downloads.${DOMAIN}`)
      traefik.http.routers.qbittorrent.entrypoints: websecure
      traefik.http.services.qbittorrent.loadbalancer.server.port: 8980
      traefik.http.services.qbittorrent.loadbalancer.passhostheader: false
      traefik.http.routers.qbittorrent.tls: true
      traefik.http.routers.qbittorrent.tls.certResolver: letsencrypt
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.X-Frame-Options: SAMEORIGIN
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Referer: ""
      traefik.http.middlewares.qbittorrent-headers.headers.customrequestheaders.Origin: ""
      traefik.http.routers.qbittorrent.middlewares: qbittorrent-headers,authelia

  jellyseerr:
    image: fallenbagel/jellyseerr:develop
    container_name: jellyseerr
    hostname: request.${DOMAIN}
    <<: *common
    volumes:
      - config-jellyseerr:/app/config
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5055",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.jellyseerr.rule: Host(`request.${DOMAIN}`)
      traefik.http.routers.jellyseerr.entrypoints: websecure
      traefik.http.services.jellyseerr.loadbalancer.server.port: 5055
      traefik.http.routers.jellyseerr.tls: true
      traefik.http.routers.jellyseerr.tls.certResolver: letsencrypt

  watch:
    container_name: watch
    image: lscr.io/linuxserver/jellyfin
    hostname: watch.${DOMAIN}
    <<: *common
    environment:
      <<: *env-vars
      DOCKER_MODS: linuxserver/mods:jellyfin-amd|linuxserver/mods:universal-package-install
      INSTALL_PACKAGES: python3
      INSTALL_PIP_PACKAGES: yt-dlp
      JELLYFIN_PublishedServerUrl: https://watch.${DOMAIN}
    volumes:
      - config-jellyfin:/config
      - config-jellyfin-cache:/cache
      - media-movies:/Movies
      - media-shows:/Television Shows
      - media-music:/Music
      - media-youtube:/Youtube
      - media-books:/Books
    group_add:
      - "989" # getent group render | cut -d: -f3
      - "986" # getent group video | cut -d: -f3
    devices:
      - /dev/dri:/dev/dri
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8096"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.services.watch.loadBalancer.server.port: 8096
      traefik.http.routers.watch.rule: Host(`watch.${DOMAIN}`)
      traefik.http.routers.watch.entrypoints: websecure
      traefik.http.routers.watch.tls: true
      traefik.http.routers.watch.tls.certResolver: letsencrypt
      traefik.http.middlewares.csp.headers.customResponseHeaders.Content-Security-Policy-Report-Only: >-
        default-src https: data: blob:; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://site-assets.fontawesome.com;
        script-src 'self' 'unsafe-inline';
        worker-src 'self' blob:; connect-src 'self' https:;
        object-src 'none'; frame-ancestors 'self'
      traefik.http.routers.watch.middlewares: csp

  podgrab:
    image: akhilrex/podgrab
    container_name: podgrab
    hostname: podcasts.${DOMAIN}
    <<: *common
    environment:
      <<: *env-vars
      CHECK_FREQUENCY: 240
    volumes:
      - config-podgrab:/config
      - media-podcasts:/assets
    labels:
      traefik.http.routers.podgrab.rule: Host(`podcasts.${DOMAIN}`)
      traefik.http.services.podgrab.loadBalancer.server.port: 8080
      traefik.http.routers.podgrab.entrypoints: websecure
      traefik.http.routers.podgrab.tls: true
      traefik.http.routers.podgrab.tls.certResolver: letsencrypt
      traefik.http.routers.podgrab.middlewares: authelia

  calibre:
    container_name: calibre
    image: lscr.io/linuxserver/calibre
    hostname: calibre.${DOMAIN}
    <<: *common
    volumes:
      - media-books:/config
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:8080"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.calibre.rule: Host(`calibre.${DOMAIN}`)
      traefik.http.services.calibre.loadBalancer.server.port: 8080
      traefik.http.routers.calibre.entrypoints: websecure
      traefik.http.routers.calibre.tls: true
      traefik.http.routers.calibre.tls.certResolver: letsencrypt
      traefik.http.routers.calibre.middlewares: authelia

  beets:
    image: lscr.io/linuxserver/beets:nightly
    container_name: beets
    hostname: beets.${DOMAIN}
    <<: *common
    volumes:
      - config-beets:/config
      - media-music:/music
      - downloads-music:/downloads
    labels:
      traefik.http.routers.beets.rule: Host(`beets.${DOMAIN}`)
      traefik.http.services.beets.loadBalancer.server.port: 8337
      traefik.http.routers.beets.entrypoints: websecure
      traefik.http.routers.beets.tls: true
      traefik.http.routers.beets.tls.certResolver: letsencrypt
      traefik.http.routers.beets.middlewares: authelia

