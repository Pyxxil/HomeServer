x-common-cloud: &cloud
  todo-api:
    image: vikunja/api
    container_name: todo-api
    <<: *common
    environment:
      <<: *env-vars
      VIKUNJA_DATABASE_HOST: postgres
      VIKUNJA_DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      VIKUNJA_DATABASE_TYPE: postgres
      VIKUNJA_DATABASE_USER: ${DATABASE_USERNAME}
      VIKUNJA_DATABASE_DATABASE: ${TODO_DATABASE}
      VIKUNJA_SERVICE_JWTSECRET: ${JWT_SECRET}
      VIKUNJA_SERVICE_FRONTENDURL: https://todo.${DOMAIN}/
      VIKUNJA_SERVICE_TIMEZONE: ${TIMEZONE}
      VIKUNJA_LOG_LEVEL: DEBUG
      VIKUNJA_METRICS_ENABLED: true
      VIKUNJA_LOG_EVENTS: stdout
      VIKUNJA_LOG_EVENTSLEVEL: info
      VIKUNJA_LOG_MAIL: stdout
      VIKUNJA_LOG_MAILLEVEL: info
      VIKUNJA_CORS_ENABLE: true
      VIKUNJA_CORS_ORIGINS: "https://todo.${DOMAIN}"
    volumes:
      - config-vikunja-conf:/etc/vikunja
      - config-vikunja:/app/vikunja/files
    depends_on:
      - postgres
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3456/api/v1/info",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo-api.rule:
        Host(`todo.${DOMAIN}`) && PathPrefix(`/api/v1`, `/dav/`,
        `/.well-known/`)
      traefik.http.routers.todo-api.entrypoints: websecure
      traefik.http.routers.todo-api.tls: true
      traefik.http.routers.todo-api.tls.certResolver: letsencrypt

  todo:
    container_name: todo
    image: vikunja/frontend
    <<: *common
    depends_on:
      - todo-api
    environment:
      <<: *env-vars
      VIKUNJA_API_URL: https://todo.${DOMAIN}/api/v1
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo.entrypoints: websecure
      traefik.http.routers.todo.tls: true
      traefik.http.routers.todo.tls.certResolver: letsencrypt

  sync:
    container_name: sync
    image: lscr.io/linuxserver/syncthing
    hostname: sync.${DOMAIN}
    <<: *common
    volumes:
      - config-syncthing:/config
      - sync:/config/Sync
    ports:
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    healthcheck:
      test: nc -z 127.0.0.1 8384 || exit 1
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      traefik.http.routers.sync.entrypoints: websecure
      traefik.http.services.sync.loadbalancer.server.port: 8384
      traefik.http.routers.sync.tls: true
      traefik.http.routers.sync.tls.certResolver: letsencrypt

  vaultwarden:
    image: vaultwarden/server
    container_name: vault
    <<: *common
    volumes:
      - config-vaultwarden:/data
    depends_on:
      - postgres
    environment:
      <<: *env-vars
      DOMAIN: "https://vault.${DOMAIN}"
      ADMIN_TOKEN: ${VAULTWARDEN_TOKEN}
      WEBSOCKET_ENABLED: true
      ROCKET_PORT: 8800
      SMTP_PORT: 25
      SMTP_SECURITY: starttls
      SMTP_HOST: ${SMTP_HOST}
      SMTP_FROM: vault@${DOMAIN}
      DATABASE_URL: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres:5432/vaultwarden
    labels:
      traefik.http.services.vaultwarden.loadbalancer.server.port: 8800
      traefik.http.routers.vaultwarden.entrypoints: websecure
      traefik.http.routers.vaultwarden.tls: true
      traefik.http.routers.vaultwarden.tls.certResolver: letsencrypt

  freshrss:
    image: lscr.io/linuxserver/freshrss
    container_name: rss
    <<: *common
    volumes:
      - config-freshrss:/config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS 'http://localhost/i/' | grep -q 'jsonVars' || exit 1",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.freshrss.entrypoints: websecure
      traefik.http.routers.freshrss.tls: true
      traefik.http.routers.freshrss.tls.certResolver: letsencrypt

  wiki:
    image: outlinewiki/outline
    container_name: wiki
    env_file: ${CONFIG_DIR}/outline/config.env
    <<: *common
    depends_on:
      - postgres
      - redis
      - minio
    healthcheck:
      test: ["CMD-SHELL", "/bin/netstat -pant | /bin/grep ':3000'"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.services.outline.loadbalancer.server.port: 3000
      traefik.http.routers.outline.entrypoints: websecure
      traefik.http.routers.outline.tls: true
      traefik.http.routers.outline.tls.certResolver: letsencrypt

  homeassistant:
    image: lscr.io/linuxserver/homeassistant
    container_name: homeassistant
    dns:
      - ${IP}
    <<: *logging
    depends_on:
      - mosquitto
    environment:
      <<: *env-vars
      DOCKER_MODS: "linuxserver/mods:homeassistant-hacs|linuxserver/mods:universal-package-install"
      INSTALL_PACKAGES: "openldap-clients|curl"
    network_mode: host
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8123/manifest.json",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - config-home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
    labels:
      traefik.enable: false

  mealie:
    container_name: meals
    image: hkotel/mealie:omni-nightly
    hostname: meals.${DOMAIN}
    <<: *common
    depends_on:
      - postgres
    environment:
      <<: *env-vars
      DB_ENGINE: postgres
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mealie
      SMTP_HOST: ${SMTP_HOST}
      SMTP_FROM_NAME: Mealie
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASS}
      SMTP_FROM_EMAIL: meals@${DOMAIN}
      SMTP_PORT: 25
      SMTP_AUTH_STRATEGY: 'TLS'
      BASE_URL: https://meals.${DOMAIN}
      LDAP_AUTH_ENABLED: true
      LDAP_TLS_INSECURE: true
      LDAP_SERVER_URL: ldap://ldap
      LDAP_BASE_DN: "dc=${DC_DOMAIN},dc=${TLD}"
      LDAP_USER_FILTER: "(&(|(uid={input})(mail={input}))(objectClass=person))"
      LDAP_ADMIN_FILTER: "(memberOf=cn=admins,ou=groups,dc=${DC_DOMAIN},dc=${TLD})"
      LDAP_QUERY_BIND: "cn=admin,dc=${DC_DOMAIN},dc=${TLD}"
      LDAP_QUERY_PASSWORD: "${LDAP_PASSWORD}"
    volumes:
      - config-mealie-data:/app/data
    labels:
      traefik.http.services.mealie.loadbalancer.server.port: 3000
      traefik.http.routers.mealie.entrypoints: websecure
      traefik.http.routers.mealie.tls: true
      traefik.http.routers.mealie.tls.certResolver: letsencrypt

  frigate:
    container_name: frigate
    image: ghcr.io/blakeblackshear/frigate:stable
    shm_size: 128mb # update for your cameras based on calculation above
    <<: *common
    depends_on:
      - mosquitto
    devices:
      - /dev/dri/renderD128 # for hwaccel
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - config-frigate:/config
      - media-camera:/media/frigate
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS 'http://localhost:5000/api/' | grep -q -i 'alive and healthy' || exit 1",
        ]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      <<: *env-vars
      LIBVA_DRIVER_NAME: radeonsi
      FRIGATE_RTSP_PASSWORD: "password"
      FRIGATE_MQTT_USERNAME: ${FRIGATE_MQTT_USERNAME}
      FRIGATE_MQTT_PASSWORD: ${FRIGATE_MQTT_PASSWORD}
      FRIGATE_REOLINK_USERNAME: ${FRIGATE_REOLINK_USERNAME}
      FRIGATE_REOLINK_PASSWORD: ${FRIGATE_REOLINK_PASSWORD}
      FRIGATE_REOLINK_IP: ${FRIGATE_REOLINK_IP}
    ports:
      - 1984:1984/tcp
      - 1984:1984/udp
      - 5000:5000
      - 8554:8554 # RTSP feeds
      - 8555:8555/tcp # WebRTC over tcp
      - 8555:8555/udp # WebRTC over udp
    labels:
      traefik.http.services.frigate.loadbalancer.server.port: 5000
      traefik.http.routers.frigate.entrypoints: websecure
      traefik.http.routers.frigate.tls: true
      traefik.http.routers.frigate.tls.certResolver: letsencrypt

