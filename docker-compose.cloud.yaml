x-common-cloud: &cloud
  todo-api:
    image: vikunja/api
    container_name: todo-api
    <<: *common
    environment:
      <<: *env-vars
      VIKUNJA_DATABASE_HOST: postgres
      VIKUNJA_DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      VIKUNJA_DATABASE_TYPE: postgres
      VIKUNJA_DATABASE_USER: ${DATABASE_USERNAME}
      VIKUNJA_DATABASE_DATABASE: ${TODO_DATABASE}
      VIKUNJA_SERVICE_JWTSECRET: ${JWT_SECRET}
      VIKUNJA_SERVICE_FRONTENDURL: https://todo.${DOMAIN}/
      VIKUNJA_SERVICE_TIMEZONE: ${TIMEZONE}
      VIKUNJA_MAILER_ENABLED: true
      VIKUNJA_MAILER_HOST: ${SMTP_HOST}
      VIKUNJA_MAILER_USERNAME: ${SMTP_USER}
      VIKUNJA_MAILER_PASSWORD: ${SMTP_PASS}
      VIKUNJA_MAILER_FROMEMAIL: todo@${DOMAIN}
      VIKUNJA_MAILER_PORT: 25
      VIKUNJA_LOG_LEVEL: DEBUG
      VIKUNJA_METRICS_ENABLED: true
      VIKUNJA_LOG_EVENTS: stdout
      VIKUNJA_LOG_EVENTSLEVEL: info
      VIKUNJA_LOG_MAIL: stdout
      VIKUNJA_LOG_MAILLEVEL: info
    volumes:
      - config-vikunja-conf:/etc/vikunja
      - config-vikunja:/app/vikunja/files
    depends_on:
      - postgres
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3456/api/v1/info",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo-api.rule:
        Host(`todo.${DOMAIN}`) && PathPrefix(`/api/v1`, `/dav/`,
        `/.well-known/`)
      traefik.http.routers.todo-api.entrypoints: websecure
      traefik.http.routers.todo-api.tls: true
      traefik.http.routers.todo-api.tls.certResolver: letsencrypt

  todo:
    container_name: todo
    image: vikunja/frontend
    <<: *common
    depends_on:
      - todo-api
    environment:
      <<: *env-vars
      VIKUNJA_API_URL: https://todo.${DOMAIN}/api/v1
    ports:
      - 127.0.0.1:3000:3000
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo.rule: Host(`todo.${DOMAIN}`)
      traefik.http.routers.todo.entrypoints: websecure
      traefik.http.routers.todo.tls: true
      traefik.http.routers.todo.tls.certResolver: letsencrypt

  sync:
    container_name: sync
    image: lscr.io/linuxserver/syncthing
    hostname: sync.${DOMAIN}
    <<: *common
    volumes:
      - config-syncthing:/config
      - sync:/config/Sync
    ports:
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    healthcheck:
      test: nc -z 127.0.0.1 8384 || exit 1
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      traefik.http.routers.sync.rule: Host(`sync.${DOMAIN}`)
      traefik.http.routers.sync.entrypoints: websecure
      traefik.http.services.sync.loadbalancer.server.port: 8384
      traefik.http.routers.sync.tls: true
      traefik.http.routers.sync.tls.certResolver: letsencrypt

  vaultwarden:
    image: vaultwarden/server
    container_name: vaultwarden
    hostname: vault.${DOMAIN}
    <<: *common
    volumes:
      - config-vaultwarden:/data
    depends_on:
      - postgres
    environment:
      <<: *env-vars
      DOMAIN: "https://vault.${DOMAIN}"
      ADMIN_TOKEN: ${VAULTWARDEN_TOKEN}
      WEBSOCKET_ENABLED: true
      ROCKET_PORT: 8800
      SMTP_PORT: 25
      SMTP_SECURITY: starttls
      SMTP_HOST: ${SMTP_HOST}
      SMTP_FROM: vault@${DOMAIN}
      DATABASE_URL: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres:5432/vaultwarden
    labels:
      traefik.http.routers.vaultwarden.rule: Host(`vault.${DOMAIN}`)
      traefik.http.services.vaultwarden.loadbalancer.server.port: 8800
      traefik.http.routers.vaultwarden.entrypoints: websecure
      traefik.http.routers.vaultwarden.tls: true
      traefik.http.routers.vaultwarden.tls.certResolver: letsencrypt

  freshrss:
    image: lscr.io/linuxserver/freshrss
    container_name: freshrss
    hostname: rss.${DOMAIN}
    <<: *common
    volumes:
      - config-freshrss:/config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS 'http://localhost/i/' | grep -q 'jsonVars' || exit 1",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.freshrss.rule: Host(`rss.${DOMAIN}`)
      traefik.http.routers.freshrss.entrypoints: websecure
      traefik.http.routers.freshrss.tls: true
      traefik.http.routers.freshrss.tls.certResolver: letsencrypt

  pocket:
    image: sissbruecker/linkding
    container_name: pocket
    hostname: pocket.${DOMAIN}
    <<: *common
    environment:
      <<: *env-vars
      LD_DB_ENGINE: postgres
      LD_DB_USER: ${DATABASE_USERNAME}
      LD_DB_PASSWORD: ${DATABASE_PASSWORD}
      LD_DB_DATABASE: pocket
      LD_DB_HOST: postgres
      LD_DB_PORT: 5432
    volumes:
      - config-pocket:/etc/linkding/data
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:9090"]
      interval: 1m
      timeout: 3s
    depends_on:
      - postgres
    ulimits:
      nofile: 1048576
    labels:
      traefik.http.routers.pocket.rule: Host(`pocket.${DOMAIN}`)
      traefik.http.routers.pocket.entrypoints: websecure
      traefik.http.services.pocket.loadbalancer.server.port: 9090
      traefik.http.routers.pocket.tls: true
      traefik.http.routers.pocket.tls.certResolver: letsencrypt

  wiki:
    image: outlinewiki/outline
    container_name: wiki
    hostname: wiki.${DOMAIN}
    env_file: ${CONFIG_DIR}/outline/config.env
    <<: *common
    depends_on:
      - postgres
      - redis
      - minio
    healthcheck:
      test: ["CMD-SHELL", "/bin/netstat -pant | /bin/grep ':3000'"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.outline.rule: Host(`wiki.${DOMAIN}`)
      traefik.http.services.outline.loadbalancer.server.port: 3000
      traefik.http.routers.outline.entrypoints: websecure
      traefik.http.routers.outline.tls: true
      traefik.http.routers.outline.tls.certResolver: letsencrypt

  homeassistant:
    image: lscr.io/linuxserver/homeassistant
    container_name: homeassistant
    dns:
      - ${IP}
    <<: *logging
    environment:
      <<: *env-vars
      DOCKER_MODS: "linuxserver/mods:homeassistant-hacs|linuxserver/mods:universal-package-install"
      INSTALL_PACKAGES: "openldap-clients|curl"
    network_mode: host
    volumes:
      - config-home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
    labels:
      traefik.enable: false

  homebox:
    image: ghcr.io/hay-kot/homebox
    container_name: homebox
    hostname: manage.${DOMAIN}
    <<: *common
    volumes:
      - config-homebox-data:/data/
    labels:
      traefik.http.routers.homebox.rule: Host(`manage.${DOMAIN}`)
      traefik.http.services.homebox.loadbalancer.server.port: 7745
      traefik.http.routers.homebox.entrypoints: websecure
      traefik.http.routers.homebox.tls: true
      traefik.http.routers.homebox.tls.certResolver: letsencrypt

  mealie:
    container_name: mealie
    image: hkotel/mealie:omni-nightly
    hostname: meals.${DOMAIN}
    <<: *common
    depends_on:
      - postgres
    environment:
      <<: *env-vars
      DB_ENGINE: postgres
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mealie
      SMTP_HOST: ${SMTP_HOST}
      SMTP_FROM_NAME: Mealie
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASS}
      SMTP_FROM_EMAIL: meals@${DOMAIN}
      SMTP_PORT: 25
      SMTP_AUTH_STRATEGY: 'TLS'
      BASE_URL: https://meals.${DOMAIN}
      LDAP_AUTH_ENABLED: true
      LDAP_TLS_INSECURE: true
      LDAP_SERVER_URL: ldap://ldap
      LDAP_BASE_DN: "dc=${DC_DOMAIN},dc=${TLD}"
      LDAP_USER_FILTER: "(&(|(uid={input})(mail={input}))(objectClass=person))"
      LDAP_ADMIN_FILTER: "(memberOf=cn=admins,ou=groups,dc=${DC_DOMAIN},dc=${TLD})"
      LDAP_QUERY_BIND: "cn=admin,dc=${DC_DOMAIN},dc=${TLD}"
      LDAP_QUERY_PASSWORD: "${LDAP_PASSWORD}"
    volumes:
      - config-mealie-data:/app/data
    labels:
      traefik.http.routers.mealie.rule: Host(`meals.${DOMAIN}`)
      traefik.http.services.mealie.loadbalancer.server.port: 3000
      traefik.http.routers.mealie.entrypoints: websecure
      traefik.http.routers.mealie.tls: true
      traefik.http.routers.mealie.tls.certResolver: letsencrypt

  firefly:
    image: fireflyiii/core
    container_name: firefly
    hostname: finances.${DOMAIN}
    <<: *common
    depends_on:
      - postgres
    environment:
      <<: *env-vars
      DB_HOST: postgres
      DB_PORT: 5432
      DB_CONNECTION: pgsql
      DB_DATABASE: firefly
      DB_USERNAME: ${DATABASE_USERNAME}
      DB_PASSWORD: ${DATABASE_PASSWORD}
      APP_KEY: ${FIREFLY_APP_KEY}
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TRUSTED_PROXIES: "**"
      APP_URL: "https://finances.${DOMAIN}"
      STATIC_CRON_TOKEN: ${FIREFLY_APP_KEY}
      AUTHENTICATION_GUARD: remote_user_guard
      AUTHENTICATION_GUARD_HEADER: HTTP_REMOTE_USER
      AUTHENTICATION_GUARD_EMAIL: Remote-Email
    volumes:
      - config-firefly:/var/www/html/storage/upload
    labels:
      traefik.http.routers.firefly.rule: Host(`finances.${DOMAIN}`)
      traefik.http.services.firefly.loadbalancer.server.port: 8080
      traefik.http.routers.firefly.entrypoints: websecure
      traefik.http.routers.firefly.tls: true
      traefik.http.routers.firefly.tls.certResolver: letsencrypt
      traefik.http.routers.firefly.middlewares: firefly-headers,authelia
      traefik.http.middlewares.firefly-headers.headers.customrequestheaders.X-Forwarded-Proto: https

  firefly-cron:
    image: alpine
    container_name: firefly-cron
    command: sh -c "echo \"0 3 * * * wget -qO- http://firefly:8080/api/v1/cron/${FIREFLY_APP_KEY}\" | crontab - && crond -f -L /dev/stdout"
    <<: *common
    labels:
      traefik.enable: false

  speedtest:
    container_name: openspeedtest
    image: openspeedtest/latest
    <<: *common
    labels:
      traefik.http.routers.speedtest.rule: Host(`speed.${DOMAIN}`)
      traefik.http.services.speedtest.loadbalancer.server.port: 3000
      traefik.http.routers.speedtest.entrypoints: websecure
      traefik.http.routers.speedtest.tls: true
      traefik.http.routers.speedtest.tls.certResolver: letsencrypt

