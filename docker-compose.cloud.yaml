x-common-cloud: &cloud
  todo-api:
    image: vikunja/api
    container_name: todo-api
    <<: *common
    environment:
      <<: *env-vars
      VIKUNJA_DATABASE_HOST: todo-db
      VIKUNJA_DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      VIKUNJA_DATABASE_TYPE: postgres
      VIKUNJA_DATABASE_USER: ${DATABASE_USERNAME}
      VIKUNJA_DATABASE_DATABASE: ${TODO_DATABASE}
      VIKUNJA_SERVICE_JWTSECRET: ${JWT_SECRET}
      VIKUNJA_SERVICE_FRONTENDURL: https://todo.${DOMAIN}/
      VIKUNJA_MAILER_ENABLED: true
      VIKUNJA_MAILER_HOST: ${VAULTWARDEN_SMTP_HOST}
      VIKUNJA_MAILER_USERNAME: ${VAULTWARDEN_SMTP_USER}
      VIKUNJA_MAILER_PASSWORD: ${VAULTWARDEN_SMTP_PASS}
      VIKUNJA_MAILER_FROMEMAIL: todo@${DOMAIN}
      VIKUNJA_MAILER_PORT: 25
      VIKUNJA_LOG_LEVEL: DEBUG
      VIKUNJA_METRICS_ENABLED: true
    volumes:
      - config-vikunja:/app/vikunja/files
    depends_on:
      - todo-db
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3456/api/v1/info",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo-api.rule:
        Host(`todo.${DOMAIN}`) && PathPrefix(`/api/v1`, `/dav/`,
        `/.well-known/`)
      traefik.http.routers.todo-api.entrypoints: websecure
      traefik.http.routers.todo-api.tls: true
      traefik.http.routers.todo-api.tls.certResolver: letsencrypt

  todo:
    container_name: todo
    image: vikunja/frontend
    <<: *common
    depends_on:
      - todo-api
    ports:
      - 3031:3000
    environment:
      <<: *env-vars
      VIKUNJA_API_URL: https://todo.${DOMAIN}/api/v1
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.todo.rule: Host(`todo.${DOMAIN}`)
      traefik.http.routers.todo.entrypoints: websecure
      traefik.http.routers.todo.tls: true
      traefik.http.routers.todo.tls.certResolver: letsencrypt

  code-server:
    image: lscr.io/linuxserver/openvscode-server:1.74.2
    container_name: code-server
    <<: *common
    environment:
      <<: *env-vars
      SUDO_PASSWORD: ${CODE_SUDO_PASSWORD}
      PROXY_DOMAIN: dev.${DOMAIN}
    volumes:
      - config-code:/config
      - sync:/sync
    labels:
      traefik.http.routers.code.rule: Host(`dev.${DOMAIN}`)
      traefik.http.services.code.loadBalancer.server.port: 3000
      traefik.http.routers.code.entrypoints: websecure
      traefik.http.routers.code.tls: true
      traefik.http.routers.code.tls.certResolver: letsencrypt

  onedev:
    image: 1dev/server
    container_name: git
    <<: *common
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - config-onedev:/opt/onedev
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:6610"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.git.rule: Host(`git.${DOMAIN}`)
      traefik.http.routers.git.entrypoints: websecure
      traefik.http.services.git.loadBalancer.server.port: 6610
      traefik.http.routers.git.tls: true
      traefik.http.routers.git.tls.certResolver: letsencrypt

  sync:
    container_name: sync
    image: lscr.io/linuxserver/syncthing
    <<: *common
    volumes:
      - config-syncthing:/config
      - sync:/config/Sync
    ports:
      - 22000:22000
      - 21027:21027/udp
    healthcheck:
      test: nc -z 127.0.0.1 8384 || exit 1
      interval: 30s
      timeout: 3s
      retries: 3
    labels:
      traefik.http.routers.sync.rule: Host(`sync.${DOMAIN}`)
      traefik.http.routers.sync.entrypoints: websecure
      traefik.http.services.sync.loadbalancer.server.port: 8384
      traefik.http.routers.sync.tls: true
      traefik.http.routers.sync.tls.certResolver: letsencrypt

  vaultwarden:
    image: vaultwarden/server
    container_name: vaultwarden
    <<: *common
    volumes:
      - config-vaultwarden:/data
    depends_on:
      - vaultwarden-db
    environment:
      <<: *env-vars
      DOMAIN: "https://vault.${DOMAIN}"
      ADMIN_TOKEN: ${VAULTWARDEN_TOKEN}
      WEBSOCKET_ENABLED: true
      ROCKET_PORT: 8800
      SMTP_PORT: 25
      SMTP_SECURITY: starttls
      SMTP_HOST: ${VAULTWARDEN_SMTP_HOST}
      SMTP_FROM: vault@${DOMAIN}
      DATABASE_URL: postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@vaultwarden-db:5432/vaultwarden
    labels:
      traefik.http.routers.vaultwarden-ui.rule: Host(`vault.${DOMAIN}`)
      traefik.http.services.vaultwarden-ui.loadbalancer.server.port: 8800
      traefik.http.routers.vaultwarden-ui.entrypoints: websecure
      traefik.http.routers.vaultwarden-ui.tls: true
      traefik.http.routers.vaultwarden-ui.tls.certResolver: letsencrypt
      traefik.http.routers.vaultwarden-ui.service: vaultwarden-ui
      traefik.http.routers.vaultwarden-websocket.rule:
        Host(`vault.${DOMAIN}`) && Path(`/notifications/hub`)
      traefik.http.routers.vaultwarden-websocket.entrypoints: websecure
      traefik.http.routers.vaultwarden-websocket.tls: true
      traefik.http.routers.vaultwarden-websocket.tls.certResolver: letsencrypt
      traefik.http.routers.vaultwarden-websocket.service: vaultwarden-websocket
      traefik.http.services.vaultwarden-websocket.loadbalancer.server.port: 3012

  freshrss:
    image: lscr.io/linuxserver/freshrss
    container_name: freshrss
    <<: *common
    volumes:
      - config-freshrss:/config
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS 'http://localhost/i/' | grep -q 'jsonVars' || exit 1",
        ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.freshrss.rule: Host(`rss.${DOMAIN}`)
      traefik.http.routers.freshrss.entrypoints: websecure
      traefik.http.routers.freshrss.tls: true
      traefik.http.routers.freshrss.tls.certResolver: letsencrypt

  pocket:
    image: sissbruecker/linkding
    container_name: pocket
    <<: *common
    environment:
      <<: *env-vars
      LD_DB_ENGINE: postgres
      LD_DB_USER: ${DATABASE_USERNAME}
      LD_DB_PASSWORD: ${DATABASE_PASSWORD}
      LD_DB_DATABASE: pocket
      LD_DB_HOST: pocket-db
      LD_DB_PORT: 5432
    volumes:
      - config-pocket:/etc/linkding/data
    healthcheck:
      test: ["CMD-SHELL", "curl --fail localhost:9090"]
      interval: 1m
      timeout: 3s
    depends_on:
      - pocket_db
    ulimits:
      nofile: 1048576
    labels:
      traefik.http.routers.pocket.rule: Host(`pocket.${DOMAIN}`)
      traefik.http.routers.pocket.entrypoints: websecure
      traefik.http.services.pocket.loadbalancer.server.port: 9090
      traefik.http.routers.pocket.tls: true
      traefik.http.routers.pocket.tls.certResolver: letsencrypt

  wiki:
    image: outlinewiki/outline
    container_name: wiki
    env_file: ${CONFIG_DIR}/outline/config.env
    command: yarn db:migrate --env production-ssl-disabled && yarn start
    <<: *common
    depends_on:
      - wiki_db
      - wiki_redis
      - minio
    healthcheck:
      test: ["CMD-SHELL", "/bin/netstat -pant | /bin/grep ':3000'"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    labels:
      traefik.http.routers.outline.rule: Host(`wiki.${DOMAIN}`)
      traefik.http.services.outline.loadbalancer.server.port: 3000
      traefik.http.routers.outline.entrypoints: websecure
      traefik.http.routers.outline.tls: true
      traefik.http.routers.outline.tls.certResolver: letsencrypt

  homeassistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: homeassistant
    <<: *logging
    environment: *env-vars
    network_mode: host
    volumes:
      - config-home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
    labels:
      traefik.enable: false

  homebox:
    image: ghcr.io/hay-kot/homebox
    container_name: homebox
    <<: *common
    volumes:
      - config-homebox-data:/data/
    labels:
      traefik.http.routers.homebox.rule: Host(`manage.${DOMAIN}`)
      traefik.http.services.homebox.loadbalancer.server.port: 7745
      traefik.http.routers.homebox.entrypoints: websecure
      traefik.http.routers.homebox.tls: true
      traefik.http.routers.homebox.tls.certResolver: letsencrypt

  mealie:
    container_name: mealie
    image: hkotel/mealie:latest
    <<: *common
    depends_on:
      - mealie-db
    environment:
      <<: *env-vars
      DB_ENGINE: postgres
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_SERVER: mealie-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: mealie
      RECIPE_PUBLIC: 'true'
      RECIPE_SHOW_NUTRITION: 'true'
      RECIPE_SHOW_ASSETS: 'true'
      RECIPE_LANDSCAPE_VIEW: 'true'
      RECIPE_DISABLE_COMMENTS: 'false'
      RECIPE_DISABLE_AMOUNT: 'false'
    volumes:
      - config-mealie-data:/app/data
    labels:
      traefik.http.routers.mealie.rule: Host(`meals.${DOMAIN}`)
      traefik.http.services.mealie.loadbalancer.server.port: 80
      traefik.http.routers.mealie.entrypoints: websecure
      traefik.http.routers.mealie.tls: true
      traefik.http.routers.mealie.tls.certResolver: letsencrypt

