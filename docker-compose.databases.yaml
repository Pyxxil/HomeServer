x-common-databases: &databases
  todo-db:
    image: postgres
    container_name: todo-db
    <<: *common
    networks:
      - internal
    volumes:
      - config-vikunja-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${TODO_DATABASE}"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${TODO_DATABASE}
    labels:
      traefik.enable: false

  vaultwarden-db:
    image: postgres
    container_name: vaultwarden-db
    <<: *common
    networks:
      - internal
    volumes:
      - config-vaultwarden-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d vaultwarden"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: vaultwarden
    labels:
      traefik.enable: false

  wiki_redis:
    image: redis
    container_name: wiki-redis
    <<: *common
    networks:
      - internal
    command: ["redis-server"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3
    labels:
      traefik.enable: false

  wiki_db:
    image: postgres
    container_name: wiki-db
    <<: *common
    networks:
      - internal
    volumes:
      - config-outline-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d outline"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: outline
    labels:
      traefik.enable: false

  auth_db:
    image: postgres
    container_name: auth-db
    <<: *common
    networks:
      - internal
    volumes:
      - config-auth-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d auth"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: auth
    labels:
      traefik.enable: false

  pocket_db:
    image: postgres
    container_name: pocket-db
    <<: *common
    networks:
      - internal
    volumes:
      - config-pocket-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d pocket"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: pocket
    labels:
      traefik.enable: false

  mealie-db:
    image: postgres
    container_name: mealie-db
    <<: *common
    networks:
      - internal
    volumes:
      - config-mealie-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d mealie"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: mealie
    labels:
      traefik.enable: false

  minio:
    image: minio/minio
    container_name: minio
    entrypoint: sh
    command: -c 'minio server /data --console-address ":9001"'
    <<: *common
    volumes:
      - config-outline-storage:/data
    environment:
      <<: *env-vars
      MINIO_BROWSER_REDIRECT_URL: "https://minio.${DOMAIN}"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      traefik.http.routers.minio.rule: Host(`minio.${DOMAIN}`)
      traefik.http.services.minio.loadbalancer.server.port: 9001
      traefik.http.routers.minio.entrypoints: websecure
      traefik.http.routers.minio.tls: true
      traefik.http.routers.minio.tls.certResolver: letsencrypt

