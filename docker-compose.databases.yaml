
x-common-databases: &databases
  postgres:
    image: postgres:16
    container_name: postgres
    <<: *common
    networks:
      - internal
    volumes:
      - config-postgres:/var/lib/postgresql
      - ./postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME} -d ${TODO_DATABASE}"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: vikunja,vaultwarden,outline,auth,mealie,letsblockit,speedtest
      PGDATA: /var/lib/postgresql/16/data
    labels:
      traefik.enable: false

  pg-vectors:
    image: tensorchord/pgvecto-rs:pg15-v0.2.0
    container_name: pg-vectors
    <<: *common
    networks:
      - internal
    volumes:
      - config-pg-vectors:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U immich -d immich"]
      interval: 30s
      timeout: 20s
      retries: 3
    environment:
      <<: *env-vars
      POSTGRES_USER: immich
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: immich
    labels:
      traefik.enable: false

  redis:
    image: redis
    container_name: redis
    <<: *common
    networks:
      - internal
    command: ["redis-server", "/data/redis.conf", "--save", "60", "1", "--loglevel", "warning" ]
    volumes:
      - config-redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 3
    labels:
      traefik.enable: false

  minio:
    image: minio/minio
    container_name: minio
    entrypoint: sh
    command: -c 'minio server /data --console-address ":9001"'
    <<: *common
    volumes:
      - config-s3:/data
    environment:
      <<: *env-vars
      MINIO_BROWSER_REDIRECT_URL: "https://minio.${DOMAIN}"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      retries: 1
      start_period: 5s
      timeout: 5s
    labels:
      traefik.http.services.minio.loadbalancer.server.port: 9001
      traefik.http.routers.minio.entrypoints: websecure
      traefik.http.routers.minio.tls: true
      traefik.http.routers.minio.tls.certResolver: letsencrypt
      traefik.http.routers.minio.service: minio
      traefik.http.routers.minioadmin.entrypoints: websecure
      traefik.http.routers.minioadmin.rule: Host(`minioapi.${DOMAIN}`)
      traefik.http.services.minioadmin.loadbalancer.server.port: 9000
      traefik.http.routers.minioadmin.tls: true
      traefik.http.routers.minioadmin.tls.certResolver: letsencrypt
      traefik.http.routers.minioadmin.service: minioadmin

  mosquitto:
    image: eclipse-mosquitto
    container_name: mqtt
    <<: *common
    networks:
      - internal
    ports:
      - 1883:1883
      - 8083:8083
    volumes:
      - config-mosquitto:/mosquitto/config
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3", "-u", "${FRIGATE_MQTT_USERNAME}", "-P", "${FRIGATE_MQTT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    labels:
      traefik.enable: false

