x-common-metrics: &metrics
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    <<: *common
    entrypoint: ["/bin/sh", "-c"]
    command:
      - "rm -rf /prometheus/data/chunks_head; /bin/prometheus
        --config.file=/etc/prometheus/prometheus.yml
        --storage.tsdb.path=/prometheus"
    volumes:
      - config-prometheus:/etc/prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:9090 || exit 1"]
      <<: *healthcheck
    labels:
      traefik.http.routers.prometheus.rule: Host(`prometheus.${DOMAIN}`) && $RESTRICTED
      traefik.http.routers.prometheus.entryPoints: websecure
      traefik.http.services.prometheus.loadbalancer.server.port: 9090
      traefik.http.routers.prometheus.tls: true
      traefik.http.routers.prometheus.tls.certResolver: letsencrypt
      traefik.http.routers.prometheus.middlewares: auth@file
      traefik.backend: prometheus

  grafana:
    image: grafana/grafana
    container_name: metrics
    hostname: metrics.${DOMAIN}
    <<: *common
    user: ${PUID}
    environment:
      <<: *env-vars
      GF_SERVER_ROOT_URL: https://metrics.${DOMAIN}
      OTEL_SERVICE_NAME: grafana
    volumes:
      - config-grafana:/etc/grafana
      - config-grafana-data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:3000/healthz | grep -i 'ok' || exit 1"]
      <<: *healthcheck
    depends_on:
      - valkey
    labels:
      traefik.http.routers.grafana.rule: Host(`metrics.${DOMAIN}`) && $RESTRICTED
      traefik.http.services.grafana.loadBalancer.server.port: 3000
      traefik.http.routers.grafana.entryPoints: websecure
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.tls.certResolver: letsencrypt

  loki:
    container_name: loki
    image: grafana/loki:3.0.0
    <<: *common
    command: -config.file=/etc/loki/loki.yaml
    volumes:
      - config-loki:/etc/loki
      - config-loki-data:/loki
    depends_on:
      - minio
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3100/ready",
        ]
      <<: *healthcheck
    user: ${PUID}:${PGID}
    labels:
      traefik.enable: false

  promtail:
    container_name: logs
    image: grafana/promtail
    <<: *common
    command: -config.file=/etc/promtail/promtail.yaml
    volumes:
      - config-promtail:/etc/promtail
      - /var/log/traefik:/var/log/traefik:ro
      - /var/cache/promtail:/tmp/positions
    depends_on:
      - loki
    labels:
      traefik.enable: false

  influxdb:
    image: influxdb
    container_name: influxdb
    <<: *common
    volumes:
      - config-influxdb:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      <<: *healthcheck
    labels:
      traefik.http.routers.influxdb.rule: Host(`influxdb.${DOMAIN}`) && $RESTRICTED
      traefik.http.routers.influxdb.entryPoints: websecure
      traefik.http.routers.influxdb.tls: true
      traefik.http.routers.influxdb.tls.certResolver: letsencrypt

  scrutiny:
    image: ghcr.io/analogj/scrutiny:master-web
    container_name: scrutiny
    <<: *common
    volumes:
      - config-scrutiny:/opt/scrutiny/config
    environment:
      <<: *env-vars
      SCRUTINY_WEB_INFLUXDB_HOST: 'influxdb'
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      <<: *healthcheck
    labels:
      traefik.http.routers.scrutiny-web.rule: Host(`smart.${DOMAIN}`) && $RESTRICTED
      traefik.http.routers.scrutiny-web.entryPoints: websecure
      traefik.http.routers.scrutiny-web.tls: true
      traefik.http.routers.scrutiny-web.tls.certResolver: letsencrypt

  scrutiny-collector:
    image: ghcr.io/analogj/scrutiny:master-collector
    <<: *common
    networks:
      - backend
    container_name: scrutiny-collector
    cap_add:
      - SYS_RAWIO
    volumes:
      - /run/udev:/run/udev:ro
    environment:
      <<: *env-vars
      COLLECTOR_API_ENDPOINT: 'http://scrutiny:8080'
      COLLECTOR_HOST_ID: 'scrutiny-collector-andromeda'
      COLLECTOR_RUN_STARTUP: true
      COLLECTOR_LOG_LEVEL: WARN
    depends_on:
      scrutiny:
        condition: service_healthy
    devices:
      - /dev/sda
      - /dev/sdb
      - /dev/sdc
      - /dev/sdd
      - /dev/sde
      - /dev/sdf
      - /dev/sdg
      - /dev/sdh
      - /dev/sdi
      - /dev/sdj
    labels:
      traefik.enable: false

